<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Angular-route]]></title>
      <url>/2017/05/05/note/Angular-route/</url>
      <content type="html"><![CDATA[<h1 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h1><blockquote><p>single page application: 单页面应用</p></blockquote><h1 id="锚链接实现原理"><a href="#锚链接实现原理" class="headerlink" title="锚链接实现原理"></a>锚链接实现原理</h1><p>利用 window.onhashchange 来监听锚点值的变化, 从而发送 ajax 来请求模板数据, 加载的页面中<br>由于是单页面应用, 所有这里的 $http 默认没有设置请求数据个数</p><h1 id="route"><a href="#route" class="headerlink" title="route"></a>route</h1><ul><li><h2 id="when-otherwise"><a href="#when-otherwise" class="headerlink" title="when().otherwise()"></a><code>when().otherwise()</code></h2><ul><li>这是 <code>$routeProvider</code> 提供的方法</li><li>匹配路由 | 其他情况</li><li>匹配规则:<blockquote><p><code>#!/list</code> <code>#!/list:name</code></p></blockquote></li><li>*传递参数<ul><li><code>#!/list?name=jack</code><blockquote><p>参数直接拼接在后面</p></blockquote></li><li><code>#!/list:name</code><blockquote><p>必须有参数, 但是参数可以为任意</p></blockquote></li><li><code>#!/list:name?</code> *<blockquote><p>可以有参数, 也可以没有参数</p></blockquote></li></ul></li><li><code>!</code> 的作用<blockquote><p>google 做了 <code>SEO</code> 优化, 在碰到 <code>#!</code> 网路爬虫会进入搜索</p></blockquote></li></ul></li><li><h2 id="templateUrl"><a href="#templateUrl" class="headerlink" title="templateUrl"></a><code>templateUrl</code></h2><blockquote><p>模板路径, 相比于 <code>template</code> 使用次数多的多</p></blockquote></li><li><h2 id="routeProvider"><a href="#routeProvider" class="headerlink" title="routeProvider"></a><code>routeProvider</code></h2><blockquote><p>对应的 <code>provider</code> 方法, 可以用来修改 <code>!</code></p></blockquote></li><li><h2 id="redirecto"><a href="#redirecto" class="headerlink" title="redirecto"></a><code>redirecto</code></h2><blockquote><p>跳转路由</p></blockquote></li><li><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a><code>controller</code></h2><blockquote><p>参数, 配置控制器</p></blockquote></li><li><h2 id="locationProvider"><a href="#locationProvider" class="headerlink" title="$locationProvider"></a><code>$locationProvider</code></h2><blockquote><p><code>$locationProvider.hashPrefix(&quot;@&quot;);</code> 可以替换或者干掉 <code>!</code></p></blockquote></li></ul><h1 id="路由的匹配"><a href="#路由的匹配" class="headerlink" title="路由的匹配 *"></a>路由的匹配 *</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 可以匹配到的路由</span></div><div class="line"><span class="comment">//                   #/search?q=rose movieType=search page=undefined</span></div><div class="line"><span class="comment">//                   #/in_theaters/3</span></div><div class="line">$routeProvider.when(<span class="string">"/:movieType/:page?"</span>, &#123;</div><div class="line">    templateUrl: <span class="string">"./movie_list/movie_list.html"</span>,</div><div class="line">    controller: <span class="string">"movie_listCtrl"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li><h2 id="只是-URL-的锚点值变化是不会触发-ajax-请求的"><a href="#只是-URL-的锚点值变化是不会触发-ajax-请求的" class="headerlink" title="只是 URL 的锚点值变化是不会触发 ajax 请求的"></a>只是 <code>URL</code> 的锚点值变化是不会触发 <code>ajax</code> 请求的</h2></li></ul>]]></content>
      
        <categories>
            
            <category> note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AngularJS </tag>
            
            <tag> note </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AngularJS]]></title>
      <url>/2017/04/28/note/AngularJS/</url>
      <content type="html"><![CDATA[<h1 id="AngularJS-的简单了解"><a href="#AngularJS-的简单了解" class="headerlink" title="AngularJS 的简单了解"></a>AngularJS 的简单了解</h1><h2 id="官方网址"><a href="#官方网址" class="headerlink" title="官方网址"></a>官方网址</h2><ul><li><h3 id="1-x-amp-2-x"><a href="#1-x-amp-2-x" class="headerlink" title="1.x &amp; 2.x"></a>1.x &amp; 2.x</h3><blockquote><p><a href="https://angularjs.org" target="_blank" rel="external">https://angularjs.org</a></p></blockquote></li><li><h3 id="4-x"><a href="#4-x" class="headerlink" title="4.x"></a>4.x</h3><blockquote><p><a href="https://angular.io" target="_blank" rel="external">https://angular.io</a></p></blockquote></li><li><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="https://docs.angularjs.org/api" target="_blank" rel="external">https://docs.angularjs.org/api</a></p></li></ul><hr><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><h3 id="augular-element"><a href="#augular-element" class="headerlink" title="augular.element()"></a><code>augular.element()</code></h3><blockquote><p>可以使原生的 <code>DOM</code> 对象装换成 <code>jQuery</code> 对象</p></blockquote><ul><li>如果页面有引入 <code>jQuery</code> 就返回完整的 jq 对象</li><li>如果页面没有引入</li><li><code>jQuery lite</code> 拥有 jq 的常用方法</li></ul><h3 id="主要用来实现-SPA-单页面应用"><a href="#主要用来实现-SPA-单页面应用" class="headerlink" title="主要用来实现 SPA  单页面应用"></a>主要用来实现 <code>SPA</code> 单页面应用</h3><h3 id="MVC-模式"><a href="#MVC-模式" class="headerlink" title="MVC 模式"></a><code>MVC</code> 模式</h3><ul><li><code>modal</code>: 数据模型, 存储页面上的数据</li><li><code>view</code>: 视图, 跟用户进行交互, 用来展示数据</li><li><code>controller</code>: 控制数据, 创建数据, 控制业务逻辑</li></ul><ul><li><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><ul><li><p>1.x</p><ul><li>市面上用的最多的版本号</li></ul></li><li><p>2.x</p><ul><li><p>使用 ts(typeJavaScript) 来重写 ==&gt; es6</p></li><li><p>2.x 不兼容 1.x</p></li></ul></li><li><p>4.x</p><ul><li>兼容 2.x 的版本</li></ul></li></ul></li></ul><hr><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建数据模型"><a href="#创建数据模型" class="headerlink" title="创建数据模型"></a>创建数据模型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 1. 创建模型数据 */</span></div><div class="line"><span class="keyword">var</span> ng = augular.module(<span class="string">'hmApp'</span>, []);</div><div class="line"><span class="comment">// 第一参数, 指定 ng 控制范围, 第二个参数, 要依赖的其他模块</span></div><div class="line"><span class="comment">// 注意第二个参数不要漏掉</span></div><div class="line"></div><div class="line"><span class="comment">/* 2. 创建控制器 */</span></div><div class="line">ng.controller(<span class="string">"demo"</span>, [<span class="string">"$scope"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">    <span class="comment">// 创建数据</span></div><div class="line">    $scope.name = <span class="string">"xxx"</span>;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 3. 关联试图与控制器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng.controller(<span class="string">"demo"</span>, [<span class="string">"$scope, function ($scope) &#123;&#125;]);</span></div></pre></td></tr></table></figure><h3 id="视图关联控制器"><a href="#视图关联控制器" class="headerlink" title="视图关联控制器"></a>视图关联控制器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><hr><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h3><ul><li><h3 id="ng-app"><a href="#ng-app" class="headerlink" title="ng-app"></a><code>ng-app</code></h3><blockquote><p>指定 <code>augular</code> 的作用范围</p></blockquote></li><li><h3 id="ng-controller"><a href="#ng-controller" class="headerlink" title="ng-controller"></a><code>ng-controller</code></h3><blockquote><p>关联视图与控制器</p></blockquote></li><li><h3 id="ng-repeat"><a href="#ng-repeat" class="headerlink" title="*ng-repeat"></a><code>*ng-repeat</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"stuts"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><blockquote><p>是写在父元素上面的, 而 vue 是写在要重复的元素上面的</p><ul><li><h3 id="ng-hide-ng-show"><a href="#ng-hide-ng-show" class="headerlink" title="ng-hide | ng-show"></a><code>ng-hide | ng-show</code></h3><ul><li>值都是布尔类型值. “true” | “false” | 表达式 | 变量(使用方式同上)</li></ul></li></ul></blockquote><ul><li><h3 id="ng-check-ng-select-ng-readonly-ng-disable"><a href="#ng-check-ng-select-ng-readonly-ng-disable" class="headerlink" title="ng-check | ng-select | ng-readonly | ng-disable"></a><code>ng-check | ng-select | ng-readonly | ng-disable</code></h3><ul><li>值都是布尔类型值. “true” | “false” | 表达式 | 变量(使用方式同上)</li></ul></li><li><h3 id="ng-src-ng-href"><a href="#ng-src-ng-href" class="headerlink" title="*ng-src | ng-href"></a><code>*ng-src | ng-href</code></h3><ul><li>特例: 需要添加 { {} } *</li><li>值都是布尔类型值. “true” | “false” | 表达式 | 变量(使用方式同上)</li></ul></li><li><h3 id="ng-if"><a href="#ng-if" class="headerlink" title="ng-if"></a><code>ng-if</code></h3><ul><li>跟 <code>ng-show</code> 的区别 ?<br>区别在于有么有被创建到都没树上<br>如果是被隐藏的, 是可以通过 <code>getComputerStyle()</code> 来获取宽高</li><li>是否被创建到DOM树上</li><li>值都是布尔类型值. “true” | “false” | 表达式 | 变量(使用方式同上)</li></ul></li><li><h3 id="ng-class"><a href="#ng-class" class="headerlink" title="ng-class"></a><code>ng-class</code></h3><ul><li>必须是对象类型</li><li>动态加载类名, 改变类名(就是对象的对应键的键值)</li><li><p>键值值可以是布尔类型值. “true” | “false” | 表达式 | 变量(使用方式同上)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-class</span>=<span class="string">"&#123;one:true&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li><li><h3 id="ng-cloak"><a href="#ng-cloak" class="headerlink" title="ng-cloak"></a><code>ng-cloak</code></h3><blockquote><p>动态生成一段 css 样式, 控制显示隐藏</p></blockquote></li><li><h3 id="ng-init"><a href="#ng-init" class="headerlink" title="ng-init"></a><code>ng-init</code></h3><blockquote><p>声明并初始化话变量, 但是很少使用到.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span> <span class="attr">ng-init</span>=<span class="string">"age=18"</span>&gt;</span></div><div class="line">    &#123; &#123;name&#125; &#125;</div><div class="line">    &#123; &#123;age&#125; &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>注意点:<ol><li><code>type=&#39;n1&#39;</code>: 这里要记得添加引号, 应该是使用 <code>eval()</code> 来执行其中的代码</li><li>没有初始化 <code>type</code> 是不能使用的</li><li>绑定函数的时候是要添加括号的, 因为这样是可以参数的</li></ol></li></ul></li><li><h3 id="ng-bind-单向绑定"><a href="#ng-bind-单向绑定" class="headerlink" title="ng-bind 单向绑定"></a><code>ng-bind</code> 单向绑定</h3><blockquote><p>数据绑定, { {} } 是 <code>ng-bind</code> 的简写</p></blockquote></li><li><h3 id="ng-model-双向绑定"><a href="#ng-model-双向绑定" class="headerlink" title="ng-model 双向绑定"></a><code>ng-model</code> 双向绑定</h3><blockquote><p>改指令只能作用在 <code>form</code> 表单上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"val"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; &#123;val&#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><hr><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><ul><li><h3 id="directive"><a href="#directive" class="headerlink" title="*directive"></a><code>*directive</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.directive(<span class="string">"tag"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 必须返回一个对象</span></div><div class="line">    <span class="keyword">return</span> &#123; &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><h3 id="返回对象的一些属性"><a href="#返回对象的一些属性" class="headerlink" title="返回对象的一些属性"></a>返回对象的一些属性</h3><ul><li><p><code>restrict</code> :自定义属性的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">restrict: <span class="string">"E"</span>,</div><div class="line">restrict: <span class="string">"EA"</span></div><div class="line"><span class="comment">// E: element 原生</span></div><div class="line"><span class="comment">// C: class 类名</span></div><div class="line"><span class="comment">// M: mark 注释</span></div><div class="line"><span class="comment">// A: attribute 属性</span></div></pre></td></tr></table></figure></li><li><p><code>replace</code></p><blockquote><p>是否替换原有的标签</p></blockquote></li><li><p><code>template</code></p><blockquote><p>模板字符串,会将其作为 <code>html</code> 元素追加到设定自定义指令的标签下面</p></blockquote></li><li><p><code>templateUrl</code></p><blockquote><p>模板的路径(作用同上)</p></blockquote></li><li><p><code>link</code>: 当被加载的时候拥有该属性的时候就会运行 <code>link</code> 函数</p><ul><li>第一个参数: scope</li><li>第二个参数: DOM 原生本身</li><li>第三个参数: attr DOM 元素的属性集合</li></ul></li><li><p>自定义属性 <code>directive</code> 的函数是没有参数的, 接收参数, 没有使用会报错的</p></li></ul></li></ul><h3 id="jqlite"><a href="#jqlite" class="headerlink" title="jqlite"></a>jqlite</h3><blockquote><p>是 <code>jQuery</code> 的精简版, 包含了主要的方法. 如果页面中有导入 <code>jQuery</code> 包的话, 那么 <code>ng</code> 中使用返回的 <code>DOM</code> 对象都是完整 <code>jQuery</code> 对象, 如果不是, 就是 <code>jqlite</code> 的创建的对象</p></blockquote><h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><ul><li><h3 id="ng-click-单击事件"><a href="#ng-click-单击事件" class="headerlink" title="ng-click 单击事件"></a><code>ng-click</code> 单击事件</h3><blockquote><p>与原生的事件名是一样的</p></blockquote></li><li><h3 id="ng-switch-amp-ng-switch-when"><a href="#ng-switch-amp-ng-switch-when" class="headerlink" title="ng-switch &amp; ng-switch-when"></a><code>ng-switch</code> &amp; <code>ng-switch-when</code></h3><blockquote><p>匹配, 当满足的时候被创建加载到dom树中, 控制元素的display值</p></blockquote></li></ul><hr><h2 id="数据的绑定"><a href="#数据的绑定" class="headerlink" title="数据的绑定"></a>数据的绑定</h2><h3 id="ug-bind-单向绑定"><a href="#ug-bind-单向绑定" class="headerlink" title="ug-bind 单向绑定"></a><code>ug-bind</code> 单向绑定</h3><blockquote><p>值就是 <code>innerText</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">unbind</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 等价于 &lt;p&gt;&#123; &#123;name&#125; &#125;&lt;/p&gt; --&gt;</span></div></pre></td></tr></table></figure><h3 id="ng-model-双向绑定-1"><a href="#ng-model-双向绑定-1" class="headerlink" title="*ng-model 双向绑定"></a><code>*ng-model</code> 双向绑定</h3><blockquote><p>注意: 这里只能在表单中使用双向绑定, 值默认为表单元素的 <code>value</code> 值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- case 1 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"val"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; &#123;val&#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"demo()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- case 2 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"switch"</span>&gt;</span>开关</div><div class="line"><span class="comment">&lt;!-- 被选中的值: true --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">ng-show</span>=<span class="string">"switch"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><hr><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="内置过滤器"><a href="#内置过滤器" class="headerlink" title="内置过滤器"></a>内置过滤器</h3><ul><li><p>货币过滤器</p><blockquote><p><code>{ { name | currency: &quot;￥&quot; : 1 } }</code> param-1: 是货币符号, param-2: 是保留的参数</p></blockquote></li><li><p><code>date</code> 日期</p><blockquote><p><code>{ {now|date:&quot;yyyy年M月dd号 HH点mm分ss秒&quot;} }</code> param-1: 日期格式</p></blockquote></li><li><p><code>uppercase</code> || <code>lowercase</code> 装换大小写</p><blockquote><p><code>{ {msg1|uppercase} } || { {msg2|lowercase} }</code> param-1: 索引, 根据索引来装换改位置的字符</p></blockquote></li><li><p><code>limitTo</code> 限制</p><blockquote><p><code>{ {arr|limitTo:-2:5} }</code> param-1: 从第索引5开始, 往左取2个</p></blockquote></li><li><p><code>number</code> 小数位数</p><blockquote><p><code>{ {num|number:2} }</code> param-1: 保留2位小数</p></blockquote></li><li><p><code>json</code> 格式, 默认执行</p></li><li><p><code>orderBy</code> 排序</p><blockquote><p><code>{ {stus|orderBy:&quot;age&quot;:true} }</code> param-1: 要根据排序的属性名, param-2: 布尔值, 升降序</p></blockquote></li><li><p><code>filter</code> 过滤</p><blockquote><p><code>{ {stus|filter:{age:18} } }</code> param-1: 过滤条件</p></blockquote></li></ul><h3 id="自定义过滤器-filter"><a href="#自定义过滤器-filter" class="headerlink" title="自定义过滤器 filter"></a>自定义过滤器 filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">app.filter(<span class="string">"filterName"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 必须返回一个函数</span></div><div class="line">    <span class="comment">// 这里至少有一个参数 data</span></div><div class="line">    <span class="comment">// data 指的是要过滤的源数据</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">data, param1, param2</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> data + <span class="string">"xx"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><hr><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="行内注入"><a href="#行内注入" class="headerlink" title="行内注入"></a>行内注入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ng = angular.module(<span class="string">"demo"</span>, []);</div><div class="line">ng.controller(<span class="string">"cl"</span>, [<span class="string">"$scope"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;&#125;]);</div></pre></td></tr></table></figure><h3 id="推断式注入"><a href="#推断式注入" class="headerlink" title="推断式注入"></a>推断式注入</h3><blockquote><p>这种方式在代码压缩混淆的时候会有问题, 不推荐使用<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ng = angular.module(<span class="string">"demo"</span>, []);</div><div class="line">ng.controller(<span class="string">"cl"</span>,  <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;&#125;);</div><div class="line"><span class="comment">// 注意: 这里是不能改变函数内部变量名, 这种方法, 在代码压缩混淆的时候会有问题产生</span></div></pre></td></tr></table></figure><p></p></blockquote><hr><h2 id="内置服务"><a href="#内置服务" class="headerlink" title="内置服务"></a>内置服务</h2><ul><li><h3 id="scope"><a href="#scope" class="headerlink" title="*$scope"></a><code>*$scope</code></h3><ul><li>数据模型</li><li>在每个 <code>event</code> 事件中, 所有的 this 指向的搜索 <code>$scope</code></li></ul></li><li><h3 id="log"><a href="#log" class="headerlink" title="$log"></a><code>$log</code></h3><ul><li>提供个性化控制台输出</li><li>可以不用删除, 提供了一个方法来让他们失效</li></ul></li><li><h3 id="http"><a href="#http" class="headerlink" title="*$http"></a><code>*$http</code></h3><blockquote><p>就是 <code>ajax</code>, 同样可以使用链式编程</p></blockquote><ul><li><p>参数 <code>options</code></p><ul><li><code>url</code></li><li><code>method</code></li><li>请求参数<ul><li><code>get</code> <code>param</code></li><li><code>post</code> <code>data</code></li></ul></li><li>发送成功时的回调函数 (链式编程)</li><li>发送失败时的回调函数 (链式编程)<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$http(&#123;</div><div class="line">    url:<span class="string">"./php/post.php"</span>,</div><div class="line">    method:<span class="string">"post"</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 请求数据, get: param, post: data</span></div><div class="line">    data:<span class="string">"uName=jack&amp;pwd=123456"</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 设置请求头</span></div><div class="line">    headers:&#123;</div><div class="line">        <span class="string">"Content-type"</span>:<span class="string">"application/x-www-form-urlencoded"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">// 这里的 catch 函数可以写在 then 的第二个参数位置, 效果是一样的</span></div><div class="line"><span class="comment">// 请求成功</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response.data);</div><div class="line"></div><div class="line"><span class="comment">// 请求失败</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"error!"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ul></li><li><p>跨域请求</p><ul><li>必须设置跨域白名单</li><li><code>method</code> 必须设置为 <code>jsonp</code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.config([<span class="string">'$sceDelegateProvider'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$sceDelegateProvider</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 设置跨域白名单</span></div><div class="line">    $sceDelegateProvider.resourceUrlWhitelist([<span class="string">"https://api.asilu.com/weather/"</span>]);</div><div class="line">&#125;])</div></pre></td></tr></table></figure></li></ul></li></ul></li><li><h3 id="timeout-和-timecancle"><a href="#timeout-和-timecancle" class="headerlink" title="$timeout 和 $timecancle"></a><code>$timeout</code> 和 <code>$timecancle</code></h3><blockquote><p>和 <code>window.setTimeout()</code> 是一样的</p></blockquote></li><li><h3 id="interval"><a href="#interval" class="headerlink" title="$interval"></a><code>$interval</code></h3><blockquote><p>和 <code>window.setInterval()</code> 用法是一样的</p></blockquote></li><li><h3 id="filter"><a href="#filter" class="headerlink" title="$filter"></a><code>$filter</code></h3><blockquote><p>内置过滤函数, 只能在对应的结构中访问, 要想在控制器内部访问, 就得使用该函数, 改服务是函数, 返回对应的过滤函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 自定义属性 */</span></div><div class="line"><span class="keyword">var</span> ng = angular.module(<span class="string">"demo"</span>, []);</div><div class="line">ng.filter(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">data, str</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(data);</div><div class="line">        <span class="keyword">return</span> data + <span class="string">"==="</span> + str;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ng.controller(<span class="string">"cl"</span>, [<span class="string">"$scope"</span>, <span class="string">"$filter"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $filter</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/* $filter 服务 */</span></div><div class="line">    <span class="keyword">var</span> test = $filter(<span class="string">"test"</span>);</div><div class="line">    <span class="built_in">console</span>.log(test);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></li></ul><hr><h2 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h2><ul><li><p><code>factoty</code> 方法</p><ul><li>参数<blockquote><p>param1: 服务的名称 param2: 数组, 依赖于其他的服务的名称, 最后一个元素是一个回调函数, 服务通过形参注入</p></blockquote></li><li>执行时机<blockquote><p>在被注入的时候就会被调用</p></blockquote></li></ul></li><li><p><code>sevice</code> 方法</p></li><li><p>区别</p><ul><li><code>sevice</code> 不需要返回, 而 <code>factory</code> 需要手动返回</li><li><code>sevice</code> 只能返回对象, 而 <code>factoty</code> 可以返回函数</li></ul></li><li><p>AngularJS关于封装的规范</p><blockquote><p>如果要封装自己的功能, 建议我们将这个功能封装到服务里面</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">app.factory(<span class="string">"itcast"</span>, [<span class="string">"$filter"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$filter</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 必须放回一个对象</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> $filter(<span class="string">"date"</span>)(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">        &#125;,</div><div class="line">        formart: <span class="function"><span class="keyword">function</span> (<span class="params">formart</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> $filter(<span class="string">"date"</span>)(<span class="keyword">new</span> <span class="built_in">Date</span>(), formart);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">app.service(<span class="string">"heima"</span>,[<span class="string">"$filter"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$filter</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 这里就是要返回对象的构造器</span></div><div class="line">    <span class="keyword">this</span>.now =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> $filter(<span class="string">"date"</span>)(<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.formart = <span class="function"><span class="keyword">function</span>(<span class="params">formart</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> $filter(<span class="string">"date"</span>)(<span class="keyword">new</span> <span class="built_in">Date</span>(),formart);</div><div class="line">    &#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure><hr><h2 id="配置块-配置服务-ng-config"><a href="#配置块-配置服务-ng-config" class="headerlink" title="配置块(配置服务) ng.config"></a>配置块(配置服务) <code>ng.config</code></h2><blockquote><p>允许我们队 <code>angularJS</code> 内置的服务做一些修改, 进而影响后面的代码执行. 找到对应服务的 <code>provider</code> 方法. 例如: <code>$log</code> ==&gt; <code>$logProvider</code>.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">app.config([<span class="string">"$logProvider"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$logProvider</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//让$log服务的debug方法失效.</span></div><div class="line">    $logProvider.debugEnabled(<span class="literal">false</span>);</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">app.config([<span class="string">"$filterProvider"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$filterProvider</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//新增1个过滤器.</span></div><div class="line">    $filterProvider.register(<span class="string">"firstBig"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> data[<span class="number">0</span>].toUpperCase()+data.slice(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure><ul><li>配置服务<ul><li>允许我们队 <code>angularJS</code> 内置的服务做一些修改</li><li><code>config</code><blockquote><p>只有一个参数, 找到对应服务的 <code>provider</code> 方法. 例如: <code>$log</code> ==&gt; <code>$logProvider</code>.</p></blockquote></li><li>参数: param-1: 数组, 对应的 <code>provider</code>, 最后必须有一个回调函数, 回调函数收前面的参数</li></ul></li></ul><hr><h2 id="run-运行块"><a href="#run-运行块" class="headerlink" title="run 运行块"></a><code>run</code> 运行块</h2><blockquote><p>脱离控制器视图使用服务</p></blockquote><ul><li>参数: param-1: 数组, 要使用服务, 最后必须有一个回调函数, 回调函数收前面的参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.run([<span class="string">"$log"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$log</span>)</span>&#123;</div><div class="line">    $log.error(<span class="string">"我脱离了控制器和视图"</span>);</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">app.run([<span class="string">"$rootScope"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$rootScope</span>)</span>&#123;</div><div class="line">    $rootScope.name = <span class="string">"jack"</span>;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure><ul><li>注意点<ul><li><code>$scope</code> 是不能脱离控制器的</li><li><code>$rootscope</code> 是存储在根作用域中的, 在其他地方也可以访问到的</li></ul></li></ul><hr><h2 id="angular-执行顺序"><a href="#angular-执行顺序" class="headerlink" title="angular 执行顺序"></a><code>angular</code> 执行顺序</h2><p><img src="./img/ngorder.png" alt="ng执行顺序"></p><hr><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li><h3 id="的使用"><a href="#的使用" class="headerlink" title="{ {} } 的使用"></a><code>{ {} }</code> 的使用</h3><ul><li>在 <code>html</code> 里, 原生的地方要使用双花括号</li><li><code>Augular</code> 扩展的属性值是不需要添加的</li><li>特例: <code>ng-src=&quot;{ {path} }&quot;</code><blockquote><p>除了特例, <code>augular</code> 属性不可以添加双花括号</p></blockquote></li></ul></li><li><h3 id="双向绑定只能在-form-表单中使用"><a href="#双向绑定只能在-form-表单中使用" class="headerlink" title="双向绑定只能在 form 表单中使用"></a>双向绑定只能在 <code>form</code> 表单中使用</h3></li><li><h3 id="绑定事件的时候的注意点"><a href="#绑定事件的时候的注意点" class="headerlink" title="绑定事件的时候的注意点"></a>绑定事件的时候的注意点</h3><ul><li><code>type=&#39;n1&#39;</code>: 这里要记得添加引号, 应该是使用 <code>eval()</code> 来执行其中的代码</li><li>没有初始化 <code>type</code> 是不能使用的</li><li>绑定函数的时候是要添加括号的, 因为这样是可以参数的</li></ul></li><li><h3 id="任何用-ng-绑定的时间的-this-指向的都是-scope"><a href="#任何用-ng-绑定的时间的-this-指向的都是-scope" class="headerlink" title="任何用 ng 绑定的时间的 this 指向的都是 $scope"></a>任何用 <code>ng</code> 绑定的时间的 <code>this</code> 指向的都是 <code>$scope</code></h3></li><li><h3 id="视图与控制器"><a href="#视图与控制器" class="headerlink" title="视图与控制器"></a>视图与控制器</h3><ul><li>控制器可以对应多个视图</li><li>控制器可以有多个</li><li>视图对应只能有一个控制器</li><li>标签写上了控制器, 就必须有改控制器, 否则报错, 不能运行</li></ul></li><li><h3 id="最重要的一点"><a href="#最重要的一点" class="headerlink" title="最重要的一点"></a>最重要的一点</h3><ul><li>尽可能的不要去操作 DOM 元素. 只有值改变 DOM 元素就会自动更新</li></ul></li><li><h3 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h3><ul><li>必须设置跨域白名单</li><li><code>method</code> 必须设置为 <code>jsonp</code></li></ul></li><li><h3 id="配置块"><a href="#配置块" class="headerlink" title="配置块"></a>配置块</h3><ul><li><code>$scope</code> 服务是不能脱离控制器视图的, 所以它是不能在run方法中使用.</li><li><code>$rootScope</code> 存储在根作用域中的数据, 在其他的任何作用域中都可以访问<ul><li>效果跟 <code>$scope</code> 是差不多的, <code>$rootScope</code> 设置的数据, 在 <code>view</code> 中是可以访问到的</li><li>但是作用域不是独立的</li></ul></li><li><code>$http</code> 的配置是 <code>$sceDelegateProvider</code> 不一样的(跨域白名单), 特殊</li></ul></li></ul>]]></content>
      
        <categories>
            
            <category> note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AngularJS </tag>
            
            <tag> note </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es6中this的指向]]></title>
      <url>/2017/04/20/ES6/es6%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</url>
      <content type="html"><![CDATA[<h1 id="es6-中-this-的指向"><a href="#es6-中-this-的指向" class="headerlink" title="es6 中 this 的指向"></a>es6 中 this 的指向</h1><hr><h2 id="es6-新增的-2-中函数写法"><a href="#es6-新增的-2-中函数写法" class="headerlink" title="es6 新增的 2 中函数写法"></a>es6 新增的 2 中函数写法</h2><h3 id="增强的对象字面量"><a href="#增强的对象字面量" class="headerlink" title="增强的对象字面量"></a>增强的对象字面量</h3><ul><li>可以在对象字母链里面定义原型</li><li>定义方法可以不用 <code>function</code> 关键字</li><li>直接调用父类方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    __proto__: &#123; sayHello()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>: hello!`</span>);</div><div class="line">    &#125; &#125;,</div><div class="line">  	name: <span class="string">"hodo"</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// ==&gt; hodo: hello!</span></div></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><blockquote><p>箭头函数应该很熟悉了吧</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> demo = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    res.name = <span class="string">'demo'</span>;</div><div class="line">  	<span class="keyword">return</span> res;</div><div class="line">&#125;;</div><div class="line">demo(&#123; <span class="attr">detail</span>: <span class="string">'this is test'</span> &#125;);</div><div class="line"><span class="comment">// ==&gt; &#123;detail: "this is test", name: "demo"&#125;</span></div></pre></td></tr></table></figure><hr><h2 id="上下文-this-指向"><a href="#上下文-this-指向" class="headerlink" title="上下文 this 指向"></a>上下文 this 指向</h2><blockquote><p>首先要知道一些:</p><pre><code>  1. es5 中的 call, apply, bind 使用方法以及这些方法在箭头函数中是不起作用的;
2. 默认的 this 指向是 global, 在浏览器下, global 就是 window, node.js 中, global 是一个空对象;
 3. 异步执行的时候 this 的指向;
 4. es6 也是词法作用域;
</code></pre></blockquote><ul><li><h3 id="箭头函数-1"><a href="#箭头函数-1" class="headerlink" title="箭头函数"></a>箭头函数</h3></li></ul><p>箭头函数中的 <code>this</code> 是动态变化的. 不是词法作用域(静态)? 当然, es6 依然是词法作用域. 只是箭头函数的 this 有点特殊, 是根据外层的作用域来继承的.</p><p><code>Object</code>对象是不会新建自己的<code>this</code>值的，所以箭头函数会一直使用词法作用域内的<code>this</code>，也就是<code>window</code></p><hr><h2 id="增强的对象字面量-1"><a href="#增强的对象字面量-1" class="headerlink" title="增强的对象字面量"></a>增强的对象字面量</h2><hr>]]></content>
      
        <categories>
            
            <category> es6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es6 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery-整体架构]]></title>
      <url>/2017/03/06/jQuery-code/jQuery-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<blockquote><p><code>jQuery</code> 诞生这么多年, 源码分析的文章到处都是.</p><p>这里将以我个人理解对代码进行分析整理, 源码摘自<code>jQuery-2.1.4.js</code></p><p>附上我收录过写的最好的最笼统的分析贴 <a href="http://www.cnblogs.com/aaronjs/p/3278578.html" target="_blank" rel="external">jQuery源码分析</a></p></blockquote><h2 id="构建实例对象的方式"><a href="#构建实例对象的方式" class="headerlink" title="构建实例对象的方式"></a>构建实例对象的方式</h2><ul><li><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="$() 使用方式"></a><code>$()</code> 使用方式</h3><blockquote><p>jQuery 的核心就是操作 DOM 元素, 操作 DOM 元素就必须要先获取 DOM 对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"body"</span>).find(<span class="string">"h1"</span>).css(<span class="string">"fontSize"</span>, <span class="number">20</span>);</div><div class="line">$(<span class="string">"p"</span>).after(<span class="string">"div"</span>);</div></pre></td></tr></table></figure><p>从上面的代码中, 不难发现, $() 是一个工厂模式创建对象的函数, 最终返回的是 $ 的一个实例化对象, 为什么 $ 不使用 new 方式来创建对象呢? 因为方便!</p><p>简单的来分析一下:</p><ol><li>$ 使用了工厂模式来构建实例对象</li><li>通过返回的实例对象掉用原型方法来操作 DOM 元素</li></ol></li></ul><ul><li><h3 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="$() 创建实例对象"></a>$() 创建实例对象</h3><p>工厂模式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 工厂模式创建对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ZP</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">  obj.name = name;</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ZP.fn = ZP.prototype = &#123;</div><div class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">": helloWorld! "</span> + (str || <span class="string">''</span>));</div><div class="line">  &#125; </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 实例化对象</span></div><div class="line"><span class="keyword">var</span> hodo = ZP(<span class="string">"zphua"</span>);		<span class="comment">// &#123; name: 'zphua' &#125;</span></div><div class="line"></div><div class="line"><span class="comment">// hodo.sayHello();  </span></div><div class="line"><span class="comment">// ==&gt; TypeError: hodo.sayHello is not a function</span></div></pre></td></tr></table></figure><p>​</p><p>返回的对象实例对象 <code>hodo</code> 拥有 <code>name</code> 属性, 值为 <code>&quot;zphua&quot;</code>.</p><p>但是很明显, 返回的 <code>obj</code> 对象是 <code>Object</code> 的实例对象, 不能调用 <code>ZP</code> 的 <code>sayHello</code> 实例方法</p><p>要使用 <code>sayHello</code> 实例方法, 就要让 <code>obj</code> 继承 <code>ZP</code> 的原型, 修改以上代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 工厂模式创建对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ZP</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(ZP.prototype);</div><div class="line">  obj.constructor = ZP;</div><div class="line">  obj.name = name;</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ZP.fn = ZP.prototype = &#123;</div><div class="line">  </div><div class="line">  <span class="comment">// 实例方法</span></div><div class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">": helloWorld! "</span> + (str || <span class="string">''</span>));</div><div class="line">  &#125; ,</div><div class="line"></div><div class="line">  <span class="comment">// 静态方法</span></div><div class="line">  toLaugh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"哈哈哈哈哈!!~~~"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 实例化对象</span></div><div class="line"><span class="keyword">var</span> hodo = ZP(<span class="string">"zphua"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 调用实例方法</span></div><div class="line">hodo.sayHello(<span class="string">"toDay is Nice!"</span>);</div><div class="line"><span class="comment">// ==&gt; zphua: helloWorld! toDay is Nice!</span></div><div class="line"></div><div class="line"><span class="comment">// 调用静态方法</span></div><div class="line">hodo.toLaugh();</div><div class="line"><span class="comment">// ==&gt; 哈哈哈哈哈!!~~~</span></div></pre></td></tr></table></figure><p>​</p><p>到这里就可以成功的创建一个 <code>ZP</code> 的实例对象, 并且成功调用原型方法. 基本上, 再现了源码的效果, 来看看源码怎么写的吧.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Define a local copy of jQuery</span></div><div class="line">jQuery = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context</span>) </span>&#123;</div><div class="line">  </div><div class="line">  <span class="comment">// The jQuery object is actually just the init constructor 'enhanced'</span></div><div class="line">  <span class="comment">// Need init if jQuery is called (just allow error to be thrown if not included)</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context);</div><div class="line">&#125;</div><div class="line"></div><div class="line">init = jQuery.fn.init = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context</span>) </span>&#123;</div><div class="line">  <span class="comment">// body... (对参数进行一系列操做)</span></div><div class="line">  </div><div class="line">  <span class="comment">// makeArray: 创建 jQuery 对象数组的方法</span></div><div class="line">  <span class="keyword">return</span> jQuery.makeArray(selector, <span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Give the init function the jQuery prototype for later instantiation</span></div><div class="line">  init.prototype = jQuery.fn;</div></pre></td></tr></table></figure><p>​</p><p>这里很明显, 基本上实现方法是一样的, 但是看起来就是高端.</p><p>分析下进一步的实现思路:</p><ol><li>把 <code>obj</code> 的构造过程放在 <code>init</code> 方法里</li><li>改变 <code>this</code> 和 <code>prototype</code> <code>constructor</code> 指向</li></ol><p>进一步改进之前的代码吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 工厂模式创建对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ZP</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="comment">// body... 对 name 进行处理</span></div><div class="line"></div><div class="line">  <span class="comment">// 1. 用 init 构造函数创建对象</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ZP.prototype.init(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ZP.fn = ZP.prototype = &#123;</div><div class="line">  </div><div class="line">  <span class="comment">// 改变 constructor 指向</span></div><div class="line">  <span class="keyword">constructor</span>: ZP,</div><div class="line"></div><div class="line">  // 构造方法</div><div class="line">  init: function (name) &#123;</div><div class="line">    <span class="comment">// body... 对 name 进行处理</span></div><div class="line"></div><div class="line">    <span class="comment">// 添加属性</span></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// 实例方法</span></div><div class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">": helloWorld! "</span> + (str || <span class="string">''</span>));</div><div class="line">  &#125; ,</div><div class="line"></div><div class="line">  <span class="comment">// 静态方法</span></div><div class="line">  toLaugh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"哈哈哈哈哈!!~~~"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 2. 改变 this 指向, 继承原型方法, 同时修改了 constructor </span></div><div class="line">ZP.prototype.init.prototype = ZP.prototype;</div><div class="line"></div><div class="line"><span class="comment">// 实例化对象</span></div><div class="line"><span class="keyword">var</span> hodo = ZP(<span class="string">"zphua"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(hodo);</div><div class="line"></div><div class="line"><span class="comment">// 调用实例方法</span></div><div class="line">hodo.sayHello(<span class="string">"toDay is Nice!"</span>);</div><div class="line"><span class="comment">// ==&gt; zphua: helloWorld! toDay is Nice!</span></div><div class="line"></div><div class="line"><span class="comment">// 调用静态方法</span></div><div class="line">hodo.toLaugh();</div><div class="line"><span class="comment">// ==&gt; 哈哈哈哈哈!!~~~</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>先看看结果吧</p><p><img src="./hodo-01.png" alt="hodoResult"></p><p>到这里创建 <code>jquery</code> 实例对象就结束了.</p></li></ul><ul><li><p>调用实例方法和静态方法</p><ul><li><p>实例方法</p><blockquote><p>就是调用 <code>prototype</code> 上的方法, 例如: $().find(); $.each(); 等方法</p></blockquote></li><li><p>静态方法</p><blockquote><p>就是调用写在 jQuery 这个函数对象方法.</p><p>比如, 在 jQuery 中, $.each 方法就是提供给内部使用的遍历方法,$(“body”).each 方法就是实例方法. 调用者的不同, 方法实现的效果就不容. 最经典的比如 $.fn.extend = $.extend = function () {};</p><p>$.extend 将在之后的 blog 中分析</p></blockquote></li></ul></li></ul><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 结构体 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 链式编程</span></div><div class="line">$(<span class="string">"body"</span>).find(<span class="string">"#demo"</span>).append($(<span class="string">"&lt;p&gt;"</span>, &#123;</div><div class="line">  id: <span class="string">"dp"</span></div><div class="line">&#125;)).css(<span class="string">"color"</span>, <span class="string">"red"</span>).html(<span class="string">"这是一个寂寞的天, 下着有些伤心的雨!"</span>);</div></pre></td></tr></table></figure><p>链式编程的实现原理很简单, 基本上遵循着一个规律:</p><blockquote><p>调用的时候1个参数是返回改属性值, 如果参数是2个, 那么返回自己, 关键就是 <code>return this</code></p></blockquote><p>实现思路如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ZP.fn.age = <span class="number">18</span>;</div><div class="line">ZP.fn.info = <span class="function"><span class="keyword">function</span> (<span class="params">key, val</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (val) &#123;</div><div class="line">    <span class="keyword">this</span>[key] = val</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>[key];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'hodo.info("age"): '</span>, hodo.info(<span class="string">"age"</span>));</div><div class="line"><span class="comment">// ==&gt; hodo.info("age"):  18</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'hodo.info("name", "sb"): '</span>, hodo.info(<span class="string">"name"</span>, <span class="string">"jack"</span>));</div><div class="line"><span class="comment">// ==&gt; hodo.info("name", "sb"):  hodo</span></div></pre></td></tr></table></figure><p>附上结果图</p><p><img src="./hodo-02.png" alt="hodo-02"></p><h2 id="插件接口-extend"><a href="#插件接口-extend" class="headerlink" title="插件接口(extend)"></a>插件接口(extend)</h2><blockquote><p>jQuery 向外界提过了扩展方法是 API: extend 方法.</p></blockquote><ul><li><h3 id="扩展-方法"><a href="#扩展-方法" class="headerlink" title="扩展 方法"></a>扩展 方法</h3></li></ul><p>使用方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 扩展静态方法</span></div><div class="line">$.extend(&#123;</div><div class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(obj.name || obj + <span class="string">": Hello!"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$.sayHello(&#123; <span class="attr">name</span>: <span class="string">"obj"</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// 扩展实例方法</span></div><div class="line">$.fn.extend(&#123;</div><div class="line">  getInnerHTML: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.html();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><blockquote><p>这里有些地方是需要注意的, 在实例方法里面的 <code>this</code> 指向的是jQuery实例对象的, 调用的是jQuery原型方法</p></blockquote><p>源码是这么写的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure><blockquote><p>jQuery和jQuery.fn的extend方法是同一个函数, 根据调用者的不同的添加方法的对象也就不同, 由于参数的数量的不同就会变成拷贝对象, 所以这里暂时讨论只有一个参数的情况.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ZP.fn.extend = ZP.extend = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  </div><div class="line">  <span class="comment">// 遍历对象拷贝对象(浅拷贝)</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">this</span>[key] = obj[key];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里, 有很多问题:</p><ol><li>obj 的属性也可能是一个对象, 上面的代码明显只能引用对象, 只是浅复制而已.</li><li>没有判断 key 是否为原型上的属性</li><li>不能拷贝不可便利的属性</li></ol><p>实际需求并没有那么的苛刻, 而jQuery源码也就只做了简单的深拷贝, 只解决的了第一个问题.</p><p>那么如何进行深复制呢? 很简单, 进行递归遍历, 创建对象再一个个属性的拷贝.</p><ul><li><h3 id="对象的深拷贝和浅拷贝"><a href="#对象的深拷贝和浅拷贝" class="headerlink" title="对象的深拷贝和浅拷贝"></a>对象的深拷贝和浅拷贝</h3></li></ul><p>前面讲到了 <code>extend</code> 方法单参数只有1个的时候是扩展方法, 那么当参数为一个以上的时候就变成了拷贝对象,.</p><p>根据需求的不同, 可以进行深拷贝和浅拷贝. 上面已经介绍了浅拷贝..</p><p>由于代码比较简单就直接上源代码, 附上详细的注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> options,                        <span class="comment">// 要拷贝的对象</span></div><div class="line">        name,                           <span class="comment">// 遍历素材对象的键</span></div><div class="line">        src,                            <span class="comment">// 目标对象的键值</span></div><div class="line">        copy,                           <span class="comment">// 素材属性的键值</span></div><div class="line">        copyIsArray,                    <span class="comment">// 判断素材的键值是否为数组类型</span></div><div class="line">        clone,</div><div class="line">        				    		  <span class="comment">// 深复制使用的空对象或数组</span></div><div class="line">        <span class="comment">// 常见用法 jQuery.extend( obj1, obj2 )，此时，target为arguments[0]</span></div><div class="line">        target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;,	<span class="comment">// 最终返回的对象</span></div><div class="line">        i = <span class="number">1</span>,					      <span class="comment">// 表示当前的 arguments 的位置</span></div><div class="line">        length = <span class="built_in">arguments</span>.length,      <span class="comment">// arguments 的长度</span></div><div class="line">        deep = <span class="literal">false</span>;				   <span class="comment">// 判断是否深复制</span></div><div class="line"></div><div class="line">    <span class="comment">// Handle a deep copy situation</span></div><div class="line">    <span class="comment">// 如果第一个参数为true，即 jQuery.extend( true, obj1, obj2 ); 的情况</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"boolean"</span>) &#123;</div><div class="line">        deep = target;</div><div class="line"></div><div class="line">        <span class="comment">// Skip the boolean and the target</span></div><div class="line">        target = <span class="built_in">arguments</span>[i] || &#123;&#125;;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Handle case when target is a string or something (possible in deep copy)</span></div><div class="line">    <span class="comment">// 处理奇怪的情况，比如 jQuery.extend( 'hello' , &#123;nick: 'casper&#125;)~~</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; !jQuery.isFunction(target)) &#123;</div><div class="line">        target = &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Extend jQuery itself if only one argument is passed</span></div><div class="line">    <span class="comment">// 处理 jQuery.extend(obj)，或 jQuery.fn.extend( obj ) 的情况</span></div><div class="line">    <span class="keyword">if</span> (i === length) &#123;</div><div class="line">        target = <span class="keyword">this</span>;</div><div class="line">        i--;            <span class="comment">// 减 1 是为了复制 arguments[0] 对象</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; i &lt; length; i++) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Only deal with non-null/undefined values</span></div><div class="line">        <span class="comment">// 如果是深拷贝，且被拷贝的属性值本身是个对象</span></div><div class="line">        <span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</div><div class="line">            <span class="comment">// Extend the base object</span></div><div class="line">            <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</div><div class="line">                src = target[name];</div><div class="line">                copy = options[name];</div><div class="line"></div><div class="line">                <span class="comment">// Prevent never-ending loop</span></div><div class="line">                <span class="comment">// 防止自引用，不赘述</span></div><div class="line">                <span class="keyword">if</span> (target === copy) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Recurse if we're merging plain objects or arrays</span></div><div class="line">                <span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) )) &#123;</div><div class="line">                    <span class="keyword">if</span> (copyIsArray) &#123;  <span class="comment">// 被拷贝的属性值是个数组</span></div><div class="line">                        copyIsArray = <span class="literal">false</span>;</div><div class="line">                        clone = src &amp;&amp; jQuery.isArray(src) ? src : [];</div><div class="line"></div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : &#123;&#125;;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// Never move original objects, clone them</span></div><div class="line">                    <span class="comment">// 递归调用自己</span></div><div class="line">                    target[name] = jQuery.extend(deep, clone, copy);</div><div class="line"></div><div class="line">                    <span class="comment">// Don't bring in undefined values</span></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy !== <span class="literal">undefined</span>) &#123;    <span class="comment">// 浅拷贝，且属性值不为undefined</span></div><div class="line">                    target[name] = copy;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Return the modified object</span></div><div class="line">  	<span class="comment">// 返回目标值</span></div><div class="line">    <span class="keyword">return</span> target;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> code-analyse </category>
            
        </categories>
        
        
        <tags>
            
            <tag> code </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xxx.com]]></title>
      <url>/2017/02/11/note/xxx-com/</url>
      <content type="html"><![CDATA[<h2 id="项目目录树"><a href="#项目目录树" class="headerlink" title="项目目录树"></a>项目目录树</h2><p>├─.vscode<br>├─assets<br>│ ├─bootstrap<br>│ │ ├─css<br>│ │ ├─fonts<br>│ │ └─js<br>│ │ └─locales<br>│ ├─ueditor<br>│ │ ├─dialogs<br>│ │ │ ├─anchor<br>│ │ │ ├─attachment<br>│ │ │ │ ├─fileTypeImages<br>│ │ │ │ └─images<br>│ │ │ ├─background<br>│ │ │ │ └─images<br>│ │ │ ├─charts<br>│ │ │ │ └─images<br>│ │ │ ├─emotion<br>│ │ │ │ └─images<br>│ │ │ ├─gmap<br>│ │ │ ├─help<br>│ │ │ ├─image<br>│ │ │ │ └─images<br>│ │ │ ├─insertframe<br>│ │ │ ├─link<br>│ │ │ ├─map<br>│ │ │ ├─music<br>│ │ │ ├─preview<br>│ │ │ ├─scrawl<br>│ │ │ │ └─images<br>│ │ │ ├─searchreplace<br>│ │ │ ├─snapscreen<br>│ │ │ ├─spechars<br>│ │ │ ├─table<br>│ │ │ ├─template<br>│ │ │ │ └─images<br>│ │ │ ├─video<br>│ │ │ │ └─images<br>│ │ │ ├─webapp<br>│ │ │ └─wordimage<br>│ │ ├─lang<br>│ │ │ ├─en<br>│ │ │ │ └─images<br>│ │ │ └─zh-cn<br>│ │ │ └─images<br>│ │ ├─php<br>│ │ ├─themes<br>│ │ │ └─default<br>│ │ │ ├─css<br>│ │ │ └─images<br>│ │ └─third-party<br>│ │ ├─codemirror<br>│ │ ├─highcharts<br>│ │ │ ├─adapters<br>│ │ │ ├─modules<br>│ │ │ └─themes<br>│ │ ├─snapscreen<br>│ │ ├─SyntaxHighlighter<br>│ │ ├─video-js<br>│ │ │ └─font<br>│ │ ├─webuploader<br>│ │ └─zeroclipboard<br>│ └─uploadify<br>│ └─__MACOSX<br>├─css<br>├─demo<br>├─imgs<br>├─js<br>│ ├─common<br>│ ├─course<br>│ ├─lib<br>│ ├─manage<br>│ └─teacher<br>└─tpls</p><h2 id="api-接口"><a href="#api-接口" class="headerlink" title="api 接口"></a>api 接口</h2><h2 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h2><ul><li><h3 id="讲师信息"><a href="#讲师信息" class="headerlink" title="讲师信息"></a>讲师信息</h3></li><li><h3 id="课程管理"><a href="#课程管理" class="headerlink" title="课程管理"></a>课程管理</h3></li><li><h3 id="课时管理"><a href="#课时管理" class="headerlink" title="课时管理"></a>课时管理</h3></li><li><h3 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h3></li></ul><blockquote><p>每个模块都大致包含了</p><pre><code>1. 添加
2. 删除
3. 修改
</code></pre><p>还有登录, 退出, 各种中心等</p></blockquote><h2 id="index-html-使用到的组件插件"><a href="#index-html-使用到的组件插件" class="headerlink" title="index.html 使用到的组件插件"></a>index.html 使用到的组件插件</h2><ul><li><h3 id="列表组件"><a href="#列表组件" class="headerlink" title="列表组件"></a>列表组件</h3></li><li><h3 id="面板组件"><a href="#面板组件" class="headerlink" title="面板组件"></a>面板组件</h3></li><li><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3></li><li><h3 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h3></li><li><h3 id="boostrap-datetimepicker-插件"><a href="#boostrap-datetimepicker-插件" class="headerlink" title="boostrap-datetimepicker 插件"></a><code>boostrap-datetimepicker</code> 插件</h3></li><li><h3 id="没有登录就跳转到登录页面"><a href="#没有登录就跳转到登录页面" class="headerlink" title="没有登录就跳转到登录页面"></a>没有登录就跳转到登录页面</h3></li></ul><h2 id="编辑讲师"><a href="#编辑讲师" class="headerlink" title="编辑讲师"></a>编辑讲师</h2><ul><li>如果不暴露数据, 就使用闭包和数据绑定.</li></ul><h2 id="复习知识"><a href="#复习知识" class="headerlink" title="复习知识"></a>复习知识</h2><ul><li><p>事件3要素: 事件源/事件类型/触发事件的对象</p></li><li><p>词法作用域 === 静态作用域</p><h3><a href="#" class="headerlink" title="=========="></a>==========</h3></li></ul><ul><li><h3 id="success-事件-e-code-对应的是-onreadload-里面的-e-status"><a href="#success-事件-e-code-对应的是-onreadload-里面的-e-status" class="headerlink" title="success 事件 e.code 对应的是 onreadload 里面的 e.status"></a>success 事件 <code>e.code</code> 对应的是 <code>onreadload</code> 里面的 <code>e.status</code></h3></li><li><h3 id="AMD-规范-CMD-规范"><a href="#AMD-规范-CMD-规范" class="headerlink" title="AMD 规范 CMD 规范"></a>AMD 规范 CMD 规范</h3><ul><li>AMD 异步,<code>requireJS</code></li><li>CMD 同步, <code>seaJS</code>(作者已经放弃了)</li></ul></li><li><h3 id="本地跳转-验证成功"><a href="#本地跳转-验证成功" class="headerlink" title="本地跳转(验证成功)"></a>本地跳转(验证成功)</h3><ul><li><h3 id="登录状态-503-501-没有联网-401-未授权"><a href="#登录状态-503-501-没有联网-401-未授权" class="headerlink" title="登录状态: 503 501 没有联网 401 未授权"></a>登录状态: 503 501 没有联网 401 未授权</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">location.href = <span class="string">"index.html"</span>;</div><div class="line">location.href = <span class="string">""</span>;</div></pre></td></tr></table></figure></li></ul></li><li><h3 id="阻止默认行为的一些方法"><a href="#阻止默认行为的一些方法" class="headerlink" title="阻止默认行为的一些方法"></a>阻止默认行为的一些方法</h3><ul><li><code>e.pre...()</code></li><li><code>return false</code></li></ul></li><li><h3 id="jQuery-trigger-方法"><a href="#jQuery-trigger-方法" class="headerlink" title="jQuery trigger() 方法"></a><code>jQuery trigger()</code> 方法</h3><ul><li>触发事件</li><li>传递参数 <code>trigger(&quot;click&quot;, [&quot;xxxx&quot;]);</code><blockquote><p>在绑定的函数里面可以使用这个参数</p></blockquote></li></ul></li><li><h3 id="toggle-切换点击时候绑定的事件"><a href="#toggle-切换点击时候绑定的事件" class="headerlink" title="toggle() 切换点击时候绑定的事件"></a><code>toggle()</code> 切换点击时候绑定的事件</h3><ul><li><code>toggle(fn1, fn2, fn3)</code> 可以多个</li></ul></li><li><h3 id="text-js"><a href="#text-js" class="headerlink" title="text.js"></a><code>text.js</code></h3><ul><li><code>difine([&quot;text!tpls/teaxherListhtml.html&quot;], function () {});</code><ul><li>text.js 插件的规则</li><li>tpls 会照我们配置的信息来替换掉</li></ul></li><li>从第一个<code>{ }</code>开始就不能使用注释, 因为使用的是正则来搜索, 所以不能添加无用的代码, 也是会被搜索到的</li></ul></li><li><h3 id="template-js-支持AMD规范"><a href="#template-js-支持AMD规范" class="headerlink" title="template.js(支持AMD规范)"></a><code>template.js</code>(支持AMD规范)</h3><ul><li><code>template(&quot;script的id&quot;, 数据);</code><ul><li>模板必须要在页面中!</li></ul></li><li><code>template.render(&quot;模板字符串&quot;, 数据);</code><ul><li>异步加载, 性能会比较好</li></ul></li><li><code>template(&quot;模板路径&quot;, 数据);</code></li><li>{each result} {each} {$value.xxx} {@$value.xxx}<ul><li>对传递进来的数据里面的result属性值遍历</li></ul></li><li>{$index} 索引值</li></ul></li><li><h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a><code>bootstrap</code></h3><ul><li>路径导航就是面包屑</li></ul></li><li><h3 id="跨页面的数据传递"><a href="#跨页面的数据传递" class="headerlink" title="跨页面的数据传递"></a>跨页面的数据传递</h3><ul><li><code>localStorage</code><ul><li>只用用户没理由删除, 数据可以永久保存</li><li><code>setItem(); getItem();</code></li><li>只能保存字符串数据, 如果不是, 会被装换成字符串, 调用 <code>toString();</code></li><li>大小 50M</li></ul></li><li><code>sessionStorage</code><ul><li>当关闭浏览器的时候就会删除</li></ul></li><li>其他的一些方法<ul><li><code>clear():</code> 清空数据</li><li><code>key():</code> 获取键名?</li><li><code>remove():</code> 根据键名删除</li></ul></li><li><code>cookie</code><ul><li>大小只有 4k 左右</li><li>一般用来验证用户信息<br><img src="./cookie-loaclStorage-sessionStrorage.png" alt="三者的区别"></li></ul></li></ul></li><li><p><code>sesstion, local</code> 中保存的数据都是可以嵌套对象, 并且不能有函数, 直接回被过滤掉 (服务器的技术)</p></li><li><p><code>cookie</code> 王牌 <code>document.cookie = &quot;id=666&quot;;</code></p><ul><li>可以在前端读写, 也可以在后台读写</li><li>回话 <code>cookie</code></li><li>持久 <code>cookie</code><ul><li><code>document.cookie = &quot;id = 999; expires = &quot; + new Date(&quot;2017-08-20 00:00:00&quot;);</code> 差了8个小时</li></ul></li><li>不能跨域</li><li>不要保存安全性较高的数据, 比如密码</li><li>大概只有 4k 左右的容量</li></ul></li><li><p><code>jQuery.cookie</code> 插件</p><ul><li><code>$.cookei(&quot;name&quot;, &quot;xxx&quot;, { expires: .5 })</code> 这是的时间是一天为单位<ul><li><code>expires</code> 可以是数字类型, 也可以是 <code>Date</code> 对象</li><li>一个参数是获取, 两个是设置值</li><li><code>$.removeCookie()</code> 传入键来删除</li></ul></li></ul></li><li><p>隐藏域</p><ul><li><code>input type=&quot;hidden&quot;</code></li></ul></li><li><p>严格模式中</p><ul><li>不能使用 <code>callee caller</code></li><li>call 不能传递(慎用)</li></ul></li><li><p><code>callback &amp;&amp; callback()</code></p></li><li><p><code>&quot;post get&quot;.split(&quot; &quot;).forEach()</code></p></li><li><p><code>boostrap</code> 中是 <code>modal(&quot;hide&quot;)</code> 即隐藏, 也删除了</p></li><li><p>多些一些伪代码, 更好的阅读性!!!</p></li><li><p>联动下拉框 城市二级联动 的实现原理</p></li><li><p>插件利器</p><ul><li><code>uploadify</code>：上传插件 <code>http://www.uploadify.com/documentation/</code></li><li><code>ueditor</code>: 富文本编辑器 <code>http://ueditor.baidu.com/website/</code><blockquote><p>有一个 zIndex 的 bug</p></blockquote></li><li><code>ckeditor</code> : en</li><li><code>echarts</code>；<code>canvas</code>做出来图表软件 <code>http://echarts.baidu.com/</code></li></ul></li><li><p>BOM 常用操作</p><ul><li>属新当前页面<blockquote><p><code>location.reload();</code></p></blockquote></li><li>网站前进后退<blockquote><p><code>location.go(-1 || 1)</code></p></blockquote></li></ul></li></ul><h2 id="UEidtor"><a href="#UEidtor" class="headerlink" title="UEidtor"></a>UEidtor</h2><ul><li>常见的富文本编辑器<ul><li>ueditor</li><li>ckeditor</li></ul></li></ul><ul><li>使用ueditor<ul><li>导入ueditor.config.js</li><li>导入ueditor.all.js</li></ul></li></ul><ul><li><p>项目中使用</p><ul><li><p>在ueditor.config.js中修改ueditor文件夹路径：window.UEDITOR_HOME_URL = “/assets/ueditor/“;</p></li><li><p>在ueditor.config.js中修改zIndex属性，超过模态框的zindex(&gt;1050)</p></li><li><p>配置ueditor.config.js/ueditor.all.js的路径</p></li><li><p>通过shim解决2个js文件的依赖</p></li><li><p>在需要渲染编辑器的模块，导入指定的js</p></li><li><p>在需要渲染编辑器的页面模板中，添加一段代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"ueContainer"</span> <span class="attr">name</span>=<span class="string">"tc_introduce"</span> <span class="attr">type</span>=<span class="string">"text/plain"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>当页面已经加载完毕之后，初始化编辑器：var ue=UE.getEditor(‘ueContainer’);</p></li><li><p>当编辑器初始化完毕后，加载原来的自我介绍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ue.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ue.setContent(res.result.tc_introduce);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
        <categories>
            
            <category> note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> RequireJs </tag>
            
            <tag> Boostrap </tag>
            
            <tag> plugin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[1-400亿中数字1出现的次数]]></title>
      <url>/2016/08/31/js-code/1-400%E4%BA%BF%E4%B8%AD%E6%95%B0%E5%AD%971%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>这里的 400亿 是一个庞大的数字, 是不能去遍历每一元素再遍历再遍历每一个位数的(超级耗性能), 这会让你的电脑卡死. 那么该怎么解决?</p><p>思路: 利用递归 + 算法 + 缓存 来实现</p></blockquote><p>附上完整代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 1-400亿 中的数字含有多少个1 */</span></div><div class="line"><span class="comment">/* ====================================== */</span></div><div class="line"><span class="comment">// 1-99 20 个 1</span></div><div class="line"></div><div class="line"><span class="comment">// 1. 递归</span></div><div class="line"><span class="comment">// 考虑到性能的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCountForNumberOfKey</span>(<span class="params">num, key</span>) </span>&#123;</div><div class="line"></div><div class="line">  	<span class="comment">// 不满足条件就直接返回</span></div><div class="line">    <span class="keyword">if</span> (key &gt; <span class="number">9</span> || key == <span class="literal">null</span> || <span class="built_in">isNaN</span>(key)) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 停止递归的条件</span></div><div class="line">    <span class="keyword">if</span> (num &lt; key) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (num &lt; key + <span class="number">10</span> &amp;&amp; num &gt;= key) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> str = num.toString(),</div><div class="line">        startNum = +str[<span class="number">0</span>],</div><div class="line">        len = str.length - <span class="number">1</span>,</div><div class="line">        lenNum = <span class="built_in">Math</span>.pow(<span class="number">10</span>, len),</div><div class="line">        remainder = num % lenNum,</div><div class="line">        <span class="comment">// 递归的体现</span></div><div class="line">        curCount = startNum * getCountForLen(len) + getCountForNumberOfKey(remainder, key);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> curCount + (startNum &lt; key ?</div><div class="line">                <span class="number">0</span> :</div><div class="line">                key == startNum ?  remainder + <span class="number">1</span> : lenNum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2. 缓存 + 算法</span></div><div class="line"><span class="comment">/* 0-9只会出现一次, 0-99只会出现 1 * 10 + 10</span></div><div class="line"><span class="comment">	以此类推, 公式: 10 的 (位数 - 1) 次方 + (位数 - 1) * 10 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCountForLen</span>(<span class="params">len</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (getCountForLen[len]) <span class="keyword">return</span> getCountForLen[len];</div><div class="line">    <span class="keyword">if</span> (<span class="number">1</span> == len) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> getCountForLen[len] = <span class="built_in">Math</span>.pow(<span class="number">10</span>, len - <span class="number">1</span>) + <span class="number">10</span> * getCountForLen(len - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 验证用(不考虑性能的写法)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params">num, key</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, counter = <span class="number">0</span>; i &lt;= num; i++) &#123;</div><div class="line">        i.toString().split(<span class="string">""</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (ele == key) counter++;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> counter;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.time(<span class="string">"three"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'three(): '</span>, three(<span class="number">1000000</span>, <span class="number">1</span>));</div><div class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"three"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.time(<span class="string">"getCountForNumberOfKey"</span>);</div><div class="line"><span class="comment">// console.log('getCountForNumberOfKey(): ', getCountForNumberOfKey(40000000000, 1));</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'getCountForNumberOfKey(): '</span>, getCountForNumberOfKey(<span class="number">40000000000</span>, <span class="number">1</span>));</div><div class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"getCountForNumberOfKey"</span>);</div></pre></td></tr></table></figure><p><code>getCountForLen</code> 缓存这里是直接缓存到函数上, 因为这是不变的, 并且位数的数量不会是庞大的, 也就没有删除的必要.</p>]]></content>
      
        <categories>
            
            <category> code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[部分兼容问题]]></title>
      <url>/2016/06/01/other/ie8%E4%BB%A5%E4%B8%8A%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="部分兼容问题"><a href="#部分兼容问题" class="headerlink" title="部分兼容问题"></a>部分兼容问题</h1><blockquote><p>内容摘自网路</p></blockquote><h2 id="万能的兼容解决方案"><a href="#万能的兼容解决方案" class="headerlink" title="万能的兼容解决方案"></a>万能的兼容解决方案</h2><p>确定流量器, 然后提示用户下载 chrome 或者 Firefox 浏览器, 简单粗暴有效. 哈哈</p><h2 id="解决兼容的插件"><a href="#解决兼容的插件" class="headerlink" title="解决兼容的插件"></a>解决兼容的插件</h2><ul><li><p><code>normallize.css</code></p></li><li><p><code>html5shiv.min.js</code></p></li><li><p><code>flex.css</code></p></li><li><p><code>autoprefixer</code></p><p>自动添加浏览器标识符, 一下是配合 <code>gulp</code> 来使用的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'autoprefixer'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> postcss      = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</div><div class="line">    <span class="keyword">var</span> sourcemaps   = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</div><div class="line">    <span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./src/*.css'</span>)</div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        .pipe(postcss([ autoprefixer() ]))</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'.'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dest'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if !IE]&gt; 除IE外都可识别 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 6]&gt; 仅IE6可识别 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if lt IE 6]&gt; IE6以及IE6以下版本可识别 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if gte IE 6]&gt; IE6以及IE6以上版本可识别 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 7]&gt; 仅IE7可识别 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if lt IE 7]&gt; IE7以及IE7以下版本可识别 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if gte IE 7]&gt; IE7以及IE7以上版本可识别 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 8]&gt; 仅IE8可识别 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 9]&gt; 仅IE9可识别 &lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><ul><li>!(非)：[if !IE]</li><li>lt(小于)：[if lt IE 6]</li><li>gt(大于)：[if gt IE 8]</li><li>gte(大于或等于)：[if gte IE 9]</li><li>&amp;(与)：[if (gt IE 6)&amp;(lt IE 8)]</li><li>|(或)：[if (IE 6)|(IE 7)]</li></ul><blockquote><p>这里将主要讨论记录 ie8 以上的兼容问题, 要说为什么? 因为我心中只有 chrome 万恶的 ie 连淘宝都放弃了.</p></blockquote><h2 id="伪类和伪元素的支持"><a href="#伪类和伪元素的支持" class="headerlink" title="伪类和伪元素的支持"></a>伪类和伪元素的支持</h2><p>ie9 中不支持的伪类:</p><ol><li><code>:default</code></li><li><code>:valid</code></li><li><code>:invalid</code></li><li><code>:in-range</code></li><li><code>ut-of-range</code></li><li><code>:required</code></li><li><code>ptional</code></li><li><code>:read-only</code></li><li><code>:read-write</code></li><li><code>::value</code></li><li><code>::choices</code></li><li><code>::repeat-item</code></li><li><code>::repeat-index</code></li></ol><blockquote><p>伪类不兼容的解决方案:</p><p>​ 例如 after 和 before 就使用 div 来代替;</p></blockquote><h2 id="使用-css-hack"><a href="#使用-css-hack" class="headerlink" title="使用 css hack"></a>使用 css hack</h2><ul><li><h3 id="ie6"><a href="#ie6" class="headerlink" title="ie6"></a>ie6</h3><ul><li><code>Selector { _property: value; }</code> /<em> property: value 表示 css 的属性名: 属性值 下同 </em>/</li><li><code>Selector { _property/**/: /**/value; }</code></li><li><em><code>Selector { -property: value; }</code> /*IE6 css hack常用习惯推荐使用下划线</em> */</li></ul></li><li><h3 id="ie7"><a href="#ie7" class="headerlink" title="ie7"></a>ie7</h3><ul><li><code>*+html Selector {}</code></li><li><code>*:first-child+html Selector {}</code></li></ul></li><li><h3 id="ie8"><a href="#ie8" class="headerlink" title="ie8"></a>ie8</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Selector</span> &#123; <span class="comment">/* 注意看value值的 */</span></div><div class="line">    <span class="attribute">property</span>: value1; <span class="comment">/* W3C MODEL */</span></div><div class="line">    <span class="attribute">property</span>: value2\<span class="number">0</span>; <span class="comment">/* IE 8+ */</span></div><div class="line">    <span class="attribute">property</span>: value1\<span class="number">9</span>\<span class="number">0</span>; <span class="comment">/* IE 9+ */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><h3 id="ie6-7-8-共有"><a href="#ie6-7-8-共有" class="headerlink" title="ie6, 7, 8 共有"></a>ie6, 7, 8 共有</h3><ul><li><code>Selector { property: value\9; }</code></li></ul></li><li><h3 id="ie6-7-共有"><a href="#ie6-7-共有" class="headerlink" title="ie6, 7 共有"></a>ie6, 7 共有</h3></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Selector &#123; *property: value; &#125;</div><div class="line">Selector &#123; #property: value; &#125;</div><div class="line">Selector &#123; +property: value; &#125;</div></pre></td></tr></table></figure><ul><li><h3 id="ie8-1"><a href="#ie8-1" class="headerlink" title="ie8"></a>ie8</h3><ul><li><code>Selector { property: value\0; }</code></li></ul></li><li><h3 id="ie9"><a href="#ie9" class="headerlink" title="ie9"></a>ie9</h3><ul><li><code>Selector { property: value\9\0; }</code></li></ul></li></ul><blockquote><p>实际举个栗子</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// ie9 hack</div><div class="line"><span class="selector-class">.index_scrm</span>&#123;</div><div class="line">    .swiper-wrapper&#123;</div><div class="line">        <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>\9\0;</div><div class="line">        <span class="selector-tag">height</span>: 380<span class="selector-tag">px</span>\9\0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><h3 id="详细的-hack-大全"><a href="#详细的-hack-大全" class="headerlink" title="详细的 hack 大全"></a><a href="http://www.webhj.com/hj-650.html" target="_blank" rel="external">详细的 hack 大全</a></h3></li></ul><h2 id="js-判断浏览器的版本"><a href="#js-判断浏览器的版本" class="headerlink" title="js 判断浏览器的版本"></a>js 判断浏览器的版本</h2><ul><li>方式1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isIE=!!<span class="built_in">window</span>.ActiveXObject;</div><div class="line"><span class="keyword">var</span> isIE6=isIE&amp;&amp;!<span class="built_in">window</span>.XMLHttpRequest;</div><div class="line"><span class="keyword">var</span> isIE8=isIE&amp;&amp;!!<span class="built_in">document</span>.documentMode;</div><div class="line"><span class="keyword">var</span> isIE7=isIE&amp;&amp;!isIE6&amp;&amp;!isIE8;</div><div class="line"><span class="keyword">if</span> (isIE)&#123;</div><div class="line">	<span class="keyword">if</span> (isIE6)&#123;</div><div class="line">		alert(<span class="string">'ie6'</span>);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (isIE8)&#123;</div><div class="line">		alert(<span class="string">'ie8'</span>);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (isIE7)&#123;</div><div class="line">		alert(<span class="string">'ie7'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>方式2</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(navigator.appName == <span class="string">'Microsoft Internet Explorer'</span> &amp;&amp; navigator.appVersion.match(<span class="regexp">/6./i</span>)==<span class="string">'6.'</span>)&#123; </div><div class="line">	alert(<span class="string">'IE 6'</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.appName == <span class="string">'Microsoft Internet Explorer'</span> &amp;&amp; navigator.appVersion.match(<span class="regexp">/7./i</span>)==<span class="string">'7.'</span>)&#123; </div><div class="line">	alert(<span class="string">'IE 7'</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.appName == <span class="string">'Microsoft Internet Explorer'</span> &amp;&amp; navigator.appVersion.match(<span class="regexp">/8./i</span>)==<span class="string">'8.'</span>)&#123; </div><div class="line">	alert(<span class="string">'IE 8'</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.appName == <span class="string">'Microsoft Internet Explorer'</span> &amp;&amp; navigator.appVersion.match(<span class="regexp">/9./i</span>)==<span class="string">'9.'</span>)&#123; </div><div class="line">	alert(<span class="string">'IE 9'</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>方式3</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(navigator.userAgent.indexOf(<span class="string">'Opera'</span>) != -<span class="number">1</span>) &#123; </div><div class="line">	alert(<span class="string">'Opera'</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.userAgent.indexOf(<span class="string">'MSIE'</span>) != -<span class="number">1</span>) &#123; </div><div class="line">	alert(<span class="string">'Internet Explorer'</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.userAgent.indexOf(<span class="string">'Firefox'</span>) != -<span class="number">1</span>) &#123; </div><div class="line">	alert(<span class="string">'Firefox'</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.userAgent.indexOf(<span class="string">'Netscape'</span>) != -<span class="number">1</span>) &#123; </div><div class="line">	alert(<span class="string">'Netscape'</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.userAgent.indexOf(<span class="string">'Safari'</span>) != -<span class="number">1</span>) &#123; </div><div class="line">	alert(<span class="string">'Safari'</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span>&#123; </div><div class="line">	alert(<span class="string">'无法识别的浏览器。'</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>方式4</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!+<span class="string">'\v1'</span> &amp;&amp; !<span class="string">'1'</span>[<span class="number">0</span>])&#123; </div><div class="line">	alert(<span class="string">'ie6或ie7'</span>) </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="实际问题清单"><a href="#实际问题清单" class="headerlink" title="实际问题清单"></a>实际问题清单</h2><h3 id="swiper3-0以上-不支持ie9"><a href="#swiper3-0以上-不支持ie9" class="headerlink" title="swiper3.0以上, 不支持ie9"></a>swiper3.0以上, 不支持ie9</h3><blockquote><p>方案: 换swiper2.*版本，或者换插件</p></blockquote><h3 id="after等伪元素不支持"><a href="#after等伪元素不支持" class="headerlink" title="after等伪元素不支持"></a>after等伪元素不支持</h3><blockquote><p>方案: 用div或者其他元素等效替代</p></blockquote><h3 id="ie9支持的属性-background-size-失效"><a href="#ie9支持的属性-background-size-失效" class="headerlink" title="ie9支持的属性 background-size 失效"></a>ie9支持的属性 <code>background-size</code> 失效</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//这么用</div><div class="line">&gt;<span class="selector-class">.two</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(../image/yunzi/temp04.png);</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">background-position</span>: center;</div><div class="line">&#125;</div><div class="line">//而不要这么用</div><div class="line">&gt;<span class="selector-class">.three</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(../image/yunzi/temp05.gif);</div><div class="line">    background-size: 170%;		//不给宽度，容易受影响，显示异常</div><div class="line">    <span class="selector-tag">background-position</span>: <span class="selector-tag">center</span> 5%;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="flex布局试下"><a href="#flex布局试下" class="headerlink" title="flex布局试下"></a>flex布局试下</h3><blockquote><p>方案: 用float或者flex.css库去兼容</p></blockquote><h3 id="display-none-9-0-失效"><a href="#display-none-9-0-失效" class="headerlink" title="display: none\9\0 失效"></a><code>display: none\9\0</code> 失效</h3><blockquote><p>方案: 需要改成 <code>display: none\9</code></p></blockquote><h3 id="ie9-中特定条件下绝对定位失效"><a href="#ie9-中特定条件下绝对定位失效" class="headerlink" title="ie9 中特定条件下绝对定位失效"></a>ie9 中特定条件下绝对定位失效</h3><blockquote><p>方案: 简化嵌套结构</p></blockquote><h3 id="keyframes-，ie9不兼容"><a href="#keyframes-，ie9不兼容" class="headerlink" title="keyframes ，ie9不兼容"></a>keyframes ，ie9不兼容</h3><blockquote><p>方案: 降级动画</p></blockquote><h3 id="ie9-中-img-只给-width-或者-height-会塌陷"><a href="#ie9-中-img-只给-width-或者-height-会塌陷" class="headerlink" title="ie9 中 img 只给 width 或者 height 会塌陷"></a>ie9 中 img 只给 width 或者 height 会塌陷</h3><blockquote><p>方案: 严格按照图片比例，来计算显示比例，两个属性都要设值，否则图片显示异常</p></blockquote>]]></content>
      
        <categories>
            
            <category> debug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> debug </tag>
            
            <tag> code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[插件冲突及踩坑]]></title>
      <url>/2016/05/30/debug/%E6%8F%92%E4%BB%B6%E5%86%B2%E7%AA%81%E5%8F%8A%E8%B8%A9%E5%9D%91/</url>
      <content type="html"><![CDATA[<blockquote><p>不定时修改, 无序</p></blockquote><h1 id="echats"><a href="#echats" class="headerlink" title="echats"></a>echats</h1><p>制作地图并设置了移动和拖动的属性的时候, 加载是没有问题的.</p><p>但是, 删除容器再动态加载是会有问题的, 移动 和 拖动属性不能同时设置, 地图会乱跑的, 只能设置其中的一个属性!</p><h1 id="UE"><a href="#UE" class="headerlink" title="UE"></a>UE</h1><p>富文本编辑器</p><p>在于 <code>boostrap</code> 的模态框中使用的时候会有很多问题</p><ul><li><p>不能全屏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 修复 UE 编辑器无法全屏的 bug (跟 boostrap 的冲突) */</span></div><div class="line">$(<span class="string">"#edui3_body"</span>).on(<span class="string">"click"</span> ,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/* dom.$modal 指的是模态框 */</span></div><div class="line"></div><div class="line">    <span class="comment">/* 非全屏时的样式 */</span></div><div class="line">    <span class="keyword">if</span> (<span class="string">"fixed"</span> == dom.$modal.css(<span class="string">"position"</span>)) &#123;</div><div class="line">        $(dom.ue.container).css(&#123;</div><div class="line">            top: <span class="number">0</span>,</div><div class="line">            left: <span class="number">0</span></div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 全屏时的样式 */</span></div><div class="line">    dom.$modal.css(&#123;</div><div class="line">        position: <span class="string">"fixed"</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 不明原因, 直接设置不生效</span></div><div class="line">    $(dom.ue.container).css(&#123;</div><div class="line">        position: <span class="string">"fixed"</span>,</div><div class="line">        top: <span class="number">0</span>,</div><div class="line">        left: <span class="number">0</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 减去全屏的差值</span></div><div class="line">    <span class="keyword">var</span> s = $(dom.ue.container).position();</div><div class="line">    $(dom.ue.container).css(&#123;</div><div class="line">        top: -s.top,</div><div class="line">        left: -s.left</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>​</p></li><li><p>模态框显示隐藏的时候, UE 会消失, 且不能动态再次动态生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ue = UE.getEditor(<span class="string">'ueContainer'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 在没有生成 ue 的时候调用自带的函数清除掉这个对象</span></div><div class="line"><span class="comment">// 比如在模态框隐藏的事件中来删除</span></div><div class="line">ue.destroy();</div></pre></td></tr></table></figure><p>​</p></li></ul><h1 id="uploadify"><a href="#uploadify" class="headerlink" title="uploadify"></a>uploadify</h1><p>要依赖于 <code>swf</code> 文件才能使用</p><p>在使用插件的时候有肯能会被浏览器的插件拦截导致报错, 影响使用</p><blockquote><p>请使用 h5 版本的 <code>uploadify</code> 或者关掉广告屏蔽插件</p></blockquote><p>================================================================================</p><h1 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h1><ul><li><code>swiper</code> 咱后面添加了2个元素, 如果使用 <code>nth</code> 的方式来设置样式的话户导致样式丢失</li></ul><blockquote><p>不能使用 nth 这种不能指定到具体元素的方式来设置样式</p></blockquote><ul><li><code>swiper</code> @4.0.0 beta2 是有问题的.</li></ul>]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> debug </tag>
            
            <tag> plug-in </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[debug]]></title>
      <url>/2016/05/30/debug/debug/</url>
      <content type="html"><![CDATA[<h1 id="移动端点透问题"><a href="#移动端点透问题" class="headerlink" title="移动端点透问题"></a>移动端点透问题</h1><ul><li><h3 id="点透出现的场景"><a href="#点透出现的场景" class="headerlink" title="点透出现的场景"></a>点透出现的场景</h3><ul><li>A/B两个层上下z轴重叠</li><li>上层的A点击后消失或移开。（这一点很重要）</li><li>B元素本身有默认click事件（如a标签） 或 B绑定了click事件。</li></ul></li><li><h3 id="出现的原因"><a href="#出现的原因" class="headerlink" title="出现的原因"></a>出现的原因</h3><blockquote><p>click延迟，延迟，还是延迟。</p><p>在移动端不使用click而用touch事件代替触摸是因为click事件有着明显的延迟，具体touchstart与click的区别如下：</p><ol><li><p>touchstart：在这个DOM（或冒泡到这个DOM）上手指触摸开始即能立即触发</p></li><li><p>click：在这个DOM（或冒泡到这个DOM）上手指触摸开始，且手指未曾在屏幕上移动（某些浏览器允许移动一个非常小的位移值），且在这个在这个dom上手指离开屏幕，且触摸和离开屏幕之间的间隔时间较短（某些浏览器不检测间隔时间，也会触发click）才能触发</p></li></ol><p>也就是说，事件的触发时间按由早到晚排列为：touchstart 早于 touchend 早于 click。亦即click的触发是有延迟的，这个时间大概在300ms左右。</p><p>由于我们在touchstart阶段就已经隐藏了罩层A，当click被触发时候，能够被点击的元素则是其下的B元素，根据click事件的触发规则：</p><p>只有在被触发时，当前有click事件的元素显示，且在面朝用户的最前端时，才触发click事件。</p><p>由于B绑定了click事件（或者B本身默认存在click事件），所以B的click事件被触发，产生了点透的情况。</p></blockquote></li><li><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>对于B元素本身没有默认click事件的情况（无a标签等），应统一使用touch事件，统一代码风格，并且由于click事件在移动端的延迟要大很多，不利于用户体验，所以关于触摸事件应尽量使用touch相关事件。</li><li>对于B元素本身存在默认click事件的情况,应及时取消A元素的默认点击事件，从而阻止click事件的产生。即应在上例的handle函数中添加代码如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(eve == <span class="string">"touchend"</span>) e.preventDefault();</div></pre></td></tr></table></figure><ol><li>对于遮盖浮层，由于遮盖浮层的点击即使有小延迟也是没有关系的，反而会有疑似更好的用户体验，所以这种情况，可以针对遮盖浮层自己采用click事件，这样就不会出现点透问题。</li></ol><blockquote><p>zepto 在新版本已经解决这个问题</p></blockquote></li></ul><h1 id="gulp-踩坑"><a href="#gulp-踩坑" class="headerlink" title="gulp 踩坑"></a>gulp 踩坑</h1><ul><li><h3 id="注意多个文件合并的时候要注意文件的先后顺序"><a href="#注意多个文件合并的时候要注意文件的先后顺序" class="headerlink" title="注意多个文件合并的时候要注意文件的先后顺序"></a>注意多个文件合并的时候要注意文件的先后顺序</h3></li><li><h3 id="之后一些没有压缩过的东西记得要手动复制过去"><a href="#之后一些没有压缩过的东西记得要手动复制过去" class="headerlink" title="之后一些没有压缩过的东西记得要手动复制过去"></a>之后一些没有压缩过的东西记得要手动复制过去</h3></li><li><h3 id="所有的沙箱模式记得前后都要添加-“-”-不然压缩的时候又可能会并排-直接报错"><a href="#所有的沙箱模式记得前后都要添加-“-”-不然压缩的时候又可能会并排-直接报错" class="headerlink" title="所有的沙箱模式记得前后都要添加 “;” 不然压缩的时候又可能会并排, 直接报错"></a>所有的沙箱模式记得前后都要添加 “;” 不然压缩的时候又可能会并排, 直接报错</h3><blockquote><p>in not function!!!</p></blockquote></li></ul>]]></content>
      
        <categories>
            
            <category> debug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> code </tag>
            
            <tag> bug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp的简单实用]]></title>
      <url>/2016/04/02/software/gulp%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">多个开发者共同开发一个项目，每位开发者负责不同的模块，</div><div class="line">这就会造成一个完整的项目实际上是由许多的“代码版段”组成的；</div><div class="line"></div><div class="line">使用less、sass等一些预处理程序，降低CSS的维护成本，最终需要将这些预处理程序进行解析；</div><div class="line"></div><div class="line">合并css、javascript，压缩html、css、javascript、images可以加速网页打开速度，提升性能；</div><div class="line">这一系列的任务完全靠手动完成几乎是不可能的，借助构建工具可以轻松实现。</div><div class="line">所谓构建工具是指通过简单配置就可以帮我们实现合并、压缩、校验、预处理等一系列任务的软件工具。</div><div class="line">常见的构建工具包括：Grunt、Gulp、F<span class="selector-class">.I</span><span class="selector-class">.S</span>（百度出品）、webpack</div></pre></td></tr></table></figure><h2 id="gulp简介"><a href="#gulp简介" class="headerlink" title="gulp简介"></a>gulp简介</h2><ul><li>gulp这个软件是用nodejs写的.</li><li>gulp是基于流的自动化构建工具</li><li>网站开发完成之后,我们要做项目构建,完成之后才可以上线.</li><li>项目构建:<ul><li>代码压缩.html css js</li><li>代码混淆</li><li>文件合并</li><li>等其它自动化工作. sass转换为css.</li></ul></li><li>这就是gulp做的事情.</li></ul><h2 id="gulp安装"><a href="#gulp安装" class="headerlink" title="gulp安装"></a>gulp安装</h2><ul><li><p>首先需要全局安装gulp,如果之前已经全局安装过,可以省略这步.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install gulp -g </div><div class="line">全局安装的插件 可以在任意的地方使用.</div><div class="line">本地安装的插件 只能在当前项目中使用.</div><div class="line">使用gulp -v命令查看安装的gulp版本 如果可以看到就说明安装成功.</div></pre></td></tr></table></figure></li><li><p>还需要本地安装,在项目目录中.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> gulp <span class="comment">--save</span></div></pre></td></tr></table></figure></li></ul><h2 id="gulp使用"><a href="#gulp使用" class="headerlink" title="gulp使用"></a>gulp使用</h2><ul><li>在项目目录中新建1个<code>gulpfile.js</code>文件.</li><li>在这个文件中写上构建代码.</li><li>先引入本地的<code>gulp</code>模块<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="comment">//这个gulp对象就可以配合插件来进行构建工作.</span></div></pre></td></tr></table></figure></li></ul><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><ul><li>gulp是以任务的形式来执行每一项构建化工作.</li><li><p>调用gulp对象的task方法可以创建任务<br>参数1: 任务名称<br>参数2: 回调函数,执行该任务的时候,要做的事情.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">"testTask"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>这个时候,我们就创建了1个任务<code>testTask</code>,该任务做的事情就是回调函数的事情.</p></li></ul><h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><ul><li><p>如何执行这个gulp任务呢?</p></li><li><p>打开cmd工具,切换工作路径到项目目录</p></li><li><p>在命令行窗口中使用<code>gulp 任务名称</code>就可以执行指定的任务.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">gulp testTask</span></div></pre></td></tr></table></figure></li><li><p>这个时候,名叫<code>testTask</code>的任务就会被执行.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="comment">// 返回的大多都是一个函数</span></div><div class="line">    htmlmin = <span class="built_in">require</span>(<span class="string">"gulp-htmlmin"</span>),</div><div class="line">    concat  = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>),</div><div class="line">    uglify  = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>),</div><div class="line">    cssMin  = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">"gulp"</span>)</div><div class="line"></div><div class="line"><span class="comment">/* 初体验 */</span></div><div class="line"><span class="comment">/* ====================================================== */</span></div><div class="line"><span class="comment">// 在gulp中, 是以任务形式执行的</span></div><div class="line"><span class="comment">// tast: 创建任务</span></div><div class="line"><span class="comment">// 参数: params-1: 任务的名字, params-2: 执行的回调函数</span></div><div class="line"><span class="comment">// 运行方法: 在命令行模式下, 输入 gulp "任务名" 例: gulp testTask</span></div><div class="line">    .task(<span class="string">"testTask"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'This is testTask'</span>);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><h2 id="压缩CSS-gulp-cssmin"><a href="#压缩CSS-gulp-cssmin" class="headerlink" title="压缩CSS gulp-cssmin"></a>压缩CSS <code>gulp-cssmin</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// gulp-cssmin 压缩 css 文件</span></div><div class="line">    .task(<span class="string">"zipCss"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span></div><div class="line">            <span class="comment">// 目标文件路径</span></div><div class="line">            <span class="comment">// .src("./assets/css/reset.css/")</span></div><div class="line"></div><div class="line">            <span class="comment">// 可以是一个数组</span></div><div class="line">            .src([</div><div class="line">                <span class="string">"./assets/css/reset.css"</span>,</div><div class="line">                <span class="string">"./assets/css/wap.css"</span></div><div class="line">            ])</div><div class="line"></div><div class="line">            <span class="comment">// 管道函数(过滤器, 阀门)</span></div><div class="line">            .pipe(cssMin())                             <span class="comment">// 压缩css代码</span></div><div class="line">            .pipe(<span class="keyword">this</span>.dest(<span class="string">"./dist/assets/css"</span>));      <span class="comment">// 压缩后放置的目录</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure><h2 id="文件监视-watch"><a href="#文件监视-watch" class="headerlink" title="文件监视 watch"></a>文件监视 <code>watch</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* watch 文件监视 */</span></div><div class="line"><span class="comment">/* ====================================================== */</span></div><div class="line"></div><div class="line">    .task(<span class="string">"watchTest"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 监视文件路径</span></div><div class="line">        <span class="comment">// 参数: params-1: 监视文件的路径, params-2: 文件发生改变执行的回调函数</span></div><div class="line">        <span class="keyword">this</span>.watch(<span class="string">"./test.js"</span>, [<span class="string">"testTask"</span>]);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><h2 id="gulp-uglify-压缩js"><a href="#gulp-uglify-压缩js" class="headerlink" title="gulp-uglify 压缩js"></a>gulp-uglify 压缩js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// gulp-uglify 压缩 js 文件</span></div><div class="line">    .task(<span class="string">"zipJs"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span></div><div class="line">            <span class="comment">// 排除文件: 在路径前面添加一个 '!'</span></div><div class="line">            .src([</div><div class="line">                <span class="string">"./*.js"</span>,</div><div class="line">                <span class="string">"!./test.js"</span>,</div><div class="line">                <span class="string">"!./gulpfile.js"</span></div><div class="line">            ])</div><div class="line">            .pipe(uglify())</div><div class="line">            .pipe(<span class="keyword">this</span>.dest(<span class="string">"./dist/assets/js/"</span>));</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><h2 id="gulp-concat-合并文件"><a href="#gulp-concat-合并文件" class="headerlink" title="gulp-concat 合并文件"></a>gulp-concat 合并文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// gulp-concat 合并文件</span></div><div class="line"></div><div class="line">    <span class="comment">// 合并js</span></div><div class="line">    .task(<span class="string">"zipJsAll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span></div><div class="line">            <span class="comment">// 这里可以使用通配符和数组</span></div><div class="line">            .src([</div><div class="line">                <span class="string">"!./test.js"</span>,</div><div class="line">                <span class="string">"!./gulpfile.js"</span>,</div><div class="line"></div><div class="line"><span class="comment">// **** 注意这里是需要注意顺序的!!!</span></div><div class="line">			   <span class="string">"./service/service.js"</span>,</div><div class="line">                <span class="string">"./list/lsit.js"</span>,</div><div class="line">                <span class="string">"./home_page/home_page.js"</span>,</div><div class="line">                <span class="string">"./details/details.js"</span>,</div><div class="line">                <span class="string">"./app.js"</span></div><div class="line">            ])</div><div class="line"></div><div class="line">            <span class="comment">// 注意这里要添加参数, 代表要合并后的文件名</span></div><div class="line">            .pipe(concat(<span class="string">"all.js"</span>))</div><div class="line">            .pipe(uglify())</div><div class="line">            .pipe(<span class="keyword">this</span>.dest(<span class="string">"./dist/assets/js"</span>))</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><h2 id="gulp-htmlmin-压缩html文件"><a href="#gulp-htmlmin-压缩html文件" class="headerlink" title="gulp-htmlmin 压缩html文件"></a>gulp-htmlmin 压缩html文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// gulp-htmlmin 压缩合并 html</span></div><div class="line">    .task(<span class="string">"zipHtml"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span></div><div class="line">            .src(<span class="string">"./index.html"</span>)</div><div class="line"></div><div class="line">            <span class="comment">// 这里要注意的是这里有一个设置参数</span></div><div class="line">            .pipe(htmlmin(&#123;</div><div class="line">                removeComments:     <span class="literal">true</span>, <span class="comment">// 清除注释</span></div><div class="line">                collapseWhitespace: <span class="literal">true</span>  <span class="comment">// 压缩 html</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(<span class="keyword">this</span>.dest(<span class="string">"./dist/"</span>));</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"><span class="comment">/* 压缩 html 的设置选选 */</span></div><div class="line"><span class="comment">/* ====================================================== */</span></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    removeComments:                <span class="literal">true</span>, <span class="comment">// 清除HTML注释</span></div><div class="line">    collapseWhitespace:            <span class="literal">true</span>, <span class="comment">// 压缩HTML</span></div><div class="line">    collapseBooleanAttributes:     <span class="literal">true</span>, <span class="comment">// 省略布尔属性的值 &lt;input checked = "true"/&gt; == &gt; &lt;input /&gt;</span></div><div class="line">    removeEmptyAttributes:         <span class="literal">true</span>, <span class="comment">// 删除所有空格作属性值 &lt;input id    = "" /&gt;    == &gt; &lt;input /&gt;</span></div><div class="line">    removeScriptTypeAttributes:    <span class="literal">true</span>, <span class="comment">// 删除&lt;script&gt;的type         = "text/javascript"</span></div><div class="line">    removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">// 删除&lt;style&gt;和&lt;link&gt;的type   = "text/css"</span></div><div class="line">    minifyJS:                      <span class="literal">true</span>, <span class="comment">// 压缩页面JS</span></div><div class="line">    minifyCSS:                     <span class="literal">true</span>  <span class="comment">// 压缩页面CSS</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="gulp-sass-将sass转换为-css"><a href="#gulp-sass-将sass转换为-css" class="headerlink" title="gulp-sass 将sass转换为 css"></a>gulp-sass 将sass转换为 css</h2><h2 id="gulp-less-将less转换为-css"><a href="#gulp-less-将less转换为-css" class="headerlink" title="gulp-less 将less转换为 css"></a>gulp-less 将less转换为 css</h2><h2 id="gulp-imagemin-压缩图片"><a href="#gulp-imagemin-压缩图片" class="headerlink" title="gulp-imagemin 压缩图片"></a>gulp-imagemin 压缩图片</h2><h1 id="详细步骤代码"><a href="#详细步骤代码" class="headerlink" title="详细步骤代码"></a>详细步骤代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 踩坑 */</span></div><div class="line"><span class="comment">/* ====================================================== */</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 1. 压缩文件的时候要注意路径问题</span></div><div class="line"><span class="comment"> * 2. js文件里面的模块文件的沙箱模式, 记得要添加分号</span></div><div class="line"><span class="comment"> *      ;(function () &#123;&#125;());</span></div><div class="line"><span class="comment"> * 3. 没有压缩的文件要原原本本的赋值过去</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* ====================================================== */</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="comment">// 返回的大多都是一个函数</span></div><div class="line">    htmlmin = <span class="built_in">require</span>(<span class="string">"gulp-htmlmin"</span>),</div><div class="line">    concat  = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>),</div><div class="line">    uglify  = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>),</div><div class="line">    cssMin  = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">"gulp"</span>)</div><div class="line"></div><div class="line"><span class="comment">/* 初体验 */</span></div><div class="line"><span class="comment">/* ====================================================== */</span></div><div class="line"><span class="comment">// 在gulp中, 是以任务形式执行的</span></div><div class="line"><span class="comment">// tast: 创建任务</span></div><div class="line"><span class="comment">// 参数: params-1: 任务的名字, params-2: 执行的回调函数</span></div><div class="line"><span class="comment">// 运行方法: 在命令行模式下, 输入 gulp "任务名" 例: gulp testTask</span></div><div class="line">    .task(<span class="string">"testTask"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'This is testTask'</span>);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 压缩 */</span></div><div class="line"><span class="comment">/* 需要下载引入对应的插件</span></div><div class="line"><span class="comment">        下载方法: npm install gulp-uglify --save */</span></div><div class="line"><span class="comment">// 引入的插件一般都是函数</span></div><div class="line"><span class="comment">/* ====================================================== */</span></div><div class="line"><span class="comment">/* 通配符的使用 */</span></div><div class="line"><span class="comment">// 1. 找都某个目录下所有的 js 文件, 不包括子目录下的 js 文件: src/*.js</span></div><div class="line"><span class="comment">// 2. 找到某个目录下所有的 js 文件, 包括子目录下的 js 文件: src/**/.js</span></div><div class="line"></div><div class="line"><span class="comment">// gulp-cssmin 压缩 css 文件</span></div><div class="line">    .task(<span class="string">"zipCss"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span></div><div class="line">            <span class="comment">// 目标文件路径</span></div><div class="line">            <span class="comment">// .src("./assets/css/reset.css/")</span></div><div class="line"></div><div class="line">            <span class="comment">// 可以是一个数组</span></div><div class="line">            .src([</div><div class="line">                <span class="string">"./assets/css/reset.css"</span>,</div><div class="line">                <span class="string">"./assets/css/wap.css"</span></div><div class="line">            ])</div><div class="line"></div><div class="line">            <span class="comment">// 管道函数(过滤器, 阀门)</span></div><div class="line">            .pipe(cssMin())                             <span class="comment">// 压缩css代码</span></div><div class="line">            .pipe(<span class="keyword">this</span>.dest(<span class="string">"./dist/assets/css"</span>));      <span class="comment">// 压缩后放置的目录</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line"><span class="comment">// gulp-uglify 压缩 js 文件</span></div><div class="line">    .task(<span class="string">"zipJs"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span></div><div class="line">            <span class="comment">// 排除文件: 在路径前面添加一个 '!'</span></div><div class="line">            .src([</div><div class="line">                <span class="string">"./*.js"</span>,</div><div class="line">                <span class="string">"!./test.js"</span>,</div><div class="line">                <span class="string">"!./gulpfile.js"</span></div><div class="line">            ])</div><div class="line">            .pipe(uglify())</div><div class="line">            .pipe(<span class="keyword">this</span>.dest(<span class="string">"./dist/assets/js/"</span>));</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"><span class="comment">// gulp-concat 合并文件</span></div><div class="line"></div><div class="line">    <span class="comment">// 合并js</span></div><div class="line">    .task(<span class="string">"zipJsAll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span></div><div class="line">            <span class="comment">// 这里可以使用通配符和数组</span></div><div class="line">            .src([</div><div class="line">                <span class="string">"!./test.js"</span>,</div><div class="line">                <span class="string">"!./gulpfile.js"</span>,</div><div class="line"></div><div class="line"><span class="comment">// **** 注意这里是需要注意顺序的!!!</span></div><div class="line">			   <span class="string">"./service/service.js"</span>,</div><div class="line">                <span class="string">"./list/lsit.js"</span>,</div><div class="line">                <span class="string">"./home_page/home_page.js"</span>,</div><div class="line">                <span class="string">"./details/details.js"</span>,</div><div class="line">                <span class="string">"./app.js"</span></div><div class="line">            ])</div><div class="line"></div><div class="line">            <span class="comment">// 注意这里要添加参数, 代表要合并后的文件名</span></div><div class="line">            .pipe(concat(<span class="string">"all.js"</span>))</div><div class="line">            .pipe(uglify())</div><div class="line">            .pipe(<span class="keyword">this</span>.dest(<span class="string">"./dist/assets/js"</span>))</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// 合并 css</span></div><div class="line">    .task(<span class="string">"zipCssAll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span></div><div class="line">            .src([</div><div class="line">                <span class="string">"./assets/css/reset.css"</span>,</div><div class="line">                <span class="string">"./assets/css/wap.css"</span></div><div class="line">            ])</div><div class="line"></div><div class="line">            .pipe(concat(<span class="string">"all.css"</span>))</div><div class="line">            .pipe(cssMin())</div><div class="line">            .pipe(<span class="keyword">this</span>.dest(<span class="string">"./dist/assets/css"</span>));</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"><span class="comment">// gulp-htmlmin 压缩合并 html</span></div><div class="line">    .task(<span class="string">"zipHtml"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span></div><div class="line">            .src(<span class="string">"./index.html"</span>)</div><div class="line"></div><div class="line">            <span class="comment">// 这里要注意的是这里有一个设置参数</span></div><div class="line">  		   <span class="comment">// 具体参数请看代码最后面</span></div><div class="line">            .pipe(htmlmin(&#123;</div><div class="line">                removeComments:     <span class="literal">true</span>, <span class="comment">// 清除注释</span></div><div class="line">                collapseWhitespace: <span class="literal">true</span>  <span class="comment">// 压缩 html</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(<span class="keyword">this</span>.dest(<span class="string">"./dist/"</span>));</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"><span class="comment">/* watch 文件监视 */</span></div><div class="line"><span class="comment">/* ====================================================== */</span></div><div class="line"></div><div class="line">    .task(<span class="string">"watchTest"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 监视文件路径</span></div><div class="line">        <span class="comment">// 参数: params-1: 监视文件的路径, params-2: 文件发生改变执行的回调函数</span></div><div class="line">        <span class="keyword">this</span>.watch(<span class="string">"./test.js"</span>, [<span class="string">"testTask"</span>]);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 压缩 html 的设置选项 */</span></div><div class="line"><span class="comment">/* ====================================================== */</span></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    removeComments:                <span class="literal">true</span>, <span class="comment">// 清除HTML注释</span></div><div class="line">    collapseWhitespace:            <span class="literal">true</span>, <span class="comment">// 压缩HTML</span></div><div class="line">    collapseBooleanAttributes:     <span class="literal">true</span>, <span class="comment">// 省略布尔属性的值 &lt;input checked = "true"/&gt; == &gt; &lt;input /&gt;</span></div><div class="line">    removeEmptyAttributes:         <span class="literal">true</span>, <span class="comment">// 删除所有空格作属性值 &lt;input id    = "" /&gt;    == &gt; &lt;input /&gt;</span></div><div class="line">    removeScriptTypeAttributes:    <span class="literal">true</span>, <span class="comment">// 删除&lt;script&gt;的type         = "text/javascript"</span></div><div class="line">    removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">// 删除&lt;style&gt;和&lt;link&gt;的type   = "text/css"</span></div><div class="line">    minifyJS:                      <span class="literal">true</span>, <span class="comment">// 压缩页面JS</span></div><div class="line">    minifyCSS:                     <span class="literal">true</span>  <span class="comment">// 压缩页面CSS</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> code </tag>
            
            <tag> software </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[browser-sync]]></title>
      <url>/2016/03/04/software/browser-sync/</url>
      <content type="html"><![CDATA[<h1 id="Browser-sync"><a href="#Browser-sync" class="headerlink" title="Browser-sync"></a>Browser-sync</h1><h2 id="Browser-sync简介"><a href="#Browser-sync简介" class="headerlink" title="Browser-sync简介"></a>Browser-sync简介</h2><ul><li>当代码发生改变以后,浏览器就自动刷新.</li><li>这是<code>browser-sync</code>提供的最主要的功能</li></ul><h2 id="browser-sync安装"><a href="#browser-sync安装" class="headerlink" title="browser-sync安装"></a>browser-sync安装</h2><ul><li><code>npm install browser-sync -g</code> 使用该命令全局安装.<ul><li><code>-dev</code>参数作用: 代表该插件是供开发阶段使用,并不是给用户使用的.</li></ul></li></ul><h2 id="browser-sync使用"><a href="#browser-sync使用" class="headerlink" title="browser-sync使用"></a>browser-sync使用</h2><ul><li>在项目文件夹中执行命令<code>browser-sync start --server --files &quot;指定要监视的文件&quot;</code></li><li>注意路径</li><li>这个时候,会启动服务 自动打开网页</li><li>当我们修改代码 保存的时候 浏览器就会自动刷新.</li><li>files参数可以使用通配符,也可以指定多个需要监视的文件.文件名之间使用逗号分隔.</li></ul><h2 id="浏览器兼容性测试"><a href="#浏览器兼容性测试" class="headerlink" title="浏览器兼容性测试."></a>浏览器兼容性测试.</h2><ul><li>浏览器操作将会被同步.</li></ul><h2 id="browser-sync后台"><a href="#browser-sync后台" class="headerlink" title="browser-sync后台"></a>browser-sync后台</h2><ul><li>可以设置具体的同步参数.</li></ul>]]></content>
      
        <categories>
            
            <category> software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> software </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http报文]]></title>
      <url>/2016/01/07/network/http%E6%8A%A5%E6%96%87/</url>
      <content type="html"><![CDATA[<h1 id="http-报文"><a href="#http-报文" class="headerlink" title="http 报文"></a><code>http</code> 报文</h1><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><ul><li><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>​ a. 请求方式: <code>get or post</code><br>​ b. 请求地址: <code>url</code></p></li><li><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>a. 浏览器的一些信息<br>b. 浏览器想给服务器的一些方法</p></li><li><h3 id="请求主体"><a href="#请求主体" class="headerlink" title="请求主体"></a>请求主体</h3><p>a. 程序员想给服务器发型的内容</p></li></ul><h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><ul><li><h3 id="响应状态"><a href="#响应状态" class="headerlink" title="响应状态"></a>响应状态</h3><blockquote><p>常见的状态码:</p></blockquote><ul><li>200 OK, 请求成功</li><li>302 缓存</li><li>304 这就表明了客户端中所请求资源的缓存仍然是有效的</li><li>400 代表客户端发起的请求不符合服务器对请求的某些限制，或者请求本身存在一定的错误</li><li>404 页面不存在</li><li>500 0内部<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="external">服务器</a>（HTTP-Internal Server Error）错误说明IIS服务器无法解析ASP代码</li><li>…</li></ul></li><li><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><ul><li>浏览器想给服务器发送的信息</li><li>浏览器的一些基本信息: 比如版本号</li></ul></li><li><h3 id="响应主体"><a href="#响应主体" class="headerlink" title="响应主体"></a>响应主体</h3><ul><li>响应返回的内容, 可以在页面直接显示</li></ul></li></ul><h2 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别:"></a><code>get</code> 和 <code>post</code> 的区别:</h2><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li><h4 id="get"><a href="#get" class="headerlink" title="get"></a><code>get</code></h4><ol><li>数据在url中</li><li>数据的大小受限于浏览器对url的限制<br>有些浏览器会限制url的长度, 理论是可以无止境的添加的<br>有些服务器也会闲着url的长度, 如果太长的话句会忽略超过的部分</li><li>所以一般较大的数据是用post来发送的</li></ol></li><li><h3 id="post"><a href="#post" class="headerlink" title="post"></a><code>post</code></h3><ol><li>数据没有在 <code>url</code> 中, 会比 <code>get</code> 方法安全一点</li><li>数据没有大小限制</li><li>服务器是可以限制 <code>post</code> 接受大小</li><li>如果要上传文件的话, 必须使用 <code>post</code><br>而且要添加 <code>enctype</code> 属性<br>这个方法只能传送单个文件<br>文件没有保存在 <code>$_POST</code> 中, 保存在 <code>$_FILES</code>;</li><li><code>send()</code> 没有发送数据的话, 也可以不用设置请求头</li></ol></li></ul><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ol><li><p>响应主体和请求主体的数据都是放在 <code>XMLHttpResquest</code> 的实例里的 <code>responseText</code> 属性里面</p></li><li><p>要上次文件的条件:<br>a. 使用 <code>post</code> 时候<br>b. 要添加属性 <code>enctype = &quot;...&quot;;</code></p></li><li><p>过程<br>a. 创建队形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpResquest();</div></pre></td></tr></table></figure><p>b. 设置请求方式, 请求地址; 设置请求行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xhr.open(<span class="string">"get/post"</span>, <span class="string">"./xxx.php"</span>);</div><div class="line"><span class="comment">// @第三个参数: 代表是否异步, 默认值是异步应该</span></div><div class="line"><span class="comment">// 这里的地址就是表单里面的action属性值</span></div></pre></td></tr></table></figure><p>c. 设置请求主体</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xhr.setRequsetHeader();</div><div class="line"><span class="comment">// 注意: 在使用 post 的时候要设置属性 "Content-Type" 的默认值</span></div><div class="line">    <span class="comment">// 在表单中, 提交的时候会默认设置一个值</span></div></pre></td></tr></table></figure><p>d. 发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xhr.send(<span class="string">"this is post text"</span>);</div><div class="line"><span class="comment">// 在使用post的时候, 是在这里传送我们需要的数据</span></div></pre></td></tr></table></figure></li></ol><p>回调函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 标准写法, 有兼容问题</span></div><div class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"hhhh"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2. 兼容写法</span></div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(xhr.responseText);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> note </tag>
            
            <tag> notwork </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
